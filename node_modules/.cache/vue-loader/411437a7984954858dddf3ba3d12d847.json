{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/flow/flow-line.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/flow/flow-line.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'flow-line',\n  props: {\n    tip: String,\n    tipDirection: String,\n    isDone: Boolean,\n    lineSpan: [Number, String],\n    processSpan: [Number, String]\n  },\n  methods: {\n    getWidth: span => typeof span === 'number' ? `${span}%` : span\n  },\n  computed: {\n    finalTipDirection () {\n      if (typeof this.tipDirection === 'undefined') {\n        return this.$parent.orientation === 'vertical' ? 'left' : 'top'\n      }\n      return this.tipDirection\n    },\n    styles () {\n      if (!this.lineSpan) {\n        return\n      }\n      const direction = this.$parent.orientation\n      const styles = {\n        flex: 'none',\n        '-webkit-box-flex': '0'\n      }\n      if (direction === 'vertical') {\n        styles.width = '3px'\n      }\n      if (this.lineSpan) {\n        if (direction === 'vertical') {\n          styles.height = this.getWidth(this.lineSpan)\n        } else {\n          styles.width = this.getWidth(this.lineSpan)\n        }\n      }\n      return styles\n    },\n    classes () {\n      if (this.isDone) {\n        return 'weui-wepay-flow__line_done'\n      }\n      if (!this.isDone && this.tip) {\n        return 'weui-wepay-flow__line_ing'\n      }\n    }\n  }\n}\n",{"version":3,"sources":["flow-line.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"flow-line.vue","sourceRoot":"node_modules/vux/src/components/flow","sourcesContent":["<template>\n  <div class=\"weui-wepay-flow__line\" :class=\"classes\" :style=\"styles\">\n    <div class=\"weui-wepay-flow__process\" :style=\"{width: getWidth(this.processSpan)}\"></div>\n    <div v-if=\"tip\" :class=\"`weui-wepay-flow__info-${finalTipDirection}`\" :style=\"{left: getWidth(this.processSpan)}\">{{ tip }}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'flow-line',\n  props: {\n    tip: String,\n    tipDirection: String,\n    isDone: Boolean,\n    lineSpan: [Number, String],\n    processSpan: [Number, String]\n  },\n  methods: {\n    getWidth: span => typeof span === 'number' ? `${span}%` : span\n  },\n  computed: {\n    finalTipDirection () {\n      if (typeof this.tipDirection === 'undefined') {\n        return this.$parent.orientation === 'vertical' ? 'left' : 'top'\n      }\n      return this.tipDirection\n    },\n    styles () {\n      if (!this.lineSpan) {\n        return\n      }\n      const direction = this.$parent.orientation\n      const styles = {\n        flex: 'none',\n        '-webkit-box-flex': '0'\n      }\n      if (direction === 'vertical') {\n        styles.width = '3px'\n      }\n      if (this.lineSpan) {\n        if (direction === 'vertical') {\n          styles.height = this.getWidth(this.lineSpan)\n        } else {\n          styles.width = this.getWidth(this.lineSpan)\n        }\n      }\n      return styles\n    },\n    classes () {\n      if (this.isDone) {\n        return 'weui-wepay-flow__line_done'\n      }\n      if (!this.isDone && this.tip) {\n        return 'weui-wepay-flow__line_ing'\n      }\n    }\n  }\n}\n</script>"]}]}