{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/swipeout/swipeout-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/swipeout/swipeout-item.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'swipeout-item',\n  props: {\n    sensitivity: {\n      type: Number,\n      default: 0\n    },\n    autoCloseOnButtonClick: {\n      type: Boolean,\n      default: true\n    },\n    disabled: Boolean,\n    threshold: {\n      type: Number,\n      default: 0.3\n    },\n    underlayColor: String,\n    transitionMode: {\n      type: String,\n      default: 'reveal'\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      this.render()\n    })\n  },\n  methods: {\n    render () {\n      this.target = this.$refs.content\n      if (this.$slots['left-menu']) {\n        this.hasLeftMenu = true\n        this.caculateMenuWidth('left')\n      }\n      if (this.$slots['right-menu']) {\n        this.hasRightMenu = true\n        this.caculateMenuWidth('right')\n      }\n    },\n    caculateMenuWidth (direction) {\n      const list = this.$slots[`${direction}-menu`][0].children.filter(one => one.tag)\n      let width = 0\n      list.forEach(one => {\n        const propsData = one.componentOptions ? one.componentOptions.propsData : {}\n        width += propsData.width || 80\n      })\n      this[`${direction}MenuWidth`] = width\n    },\n    onContentClick () {\n      if (this.styles.transform.indexOf('(0px, 0, 0)') === -1) {\n        this._setClose(200)\n      }\n    },\n    onItemClick () {\n      if (this.autoCloseOnButtonClick) {\n        this._setClose()\n      }\n    },\n    start (ev) {\n      if (this.disabled || this.isOpen || ev.target.nodeName.toLowerCase() === 'button') {\n        return\n      }\n      if (this.$parent.$options._componentTag === 'swipeout') {\n        const openItems = this.$parent.$children.filter(item => item.$data.styles.transform.indexOf('(0px, 0, 0)') === -1)\n        if (openItems.length > 0) {\n          openItems.forEach(item => {\n            item.setOffset(0, true)\n          })\n          ev.preventDefault()\n          return\n        }\n      }\n      const touch = ev.touches ? ev.touches[0] : ev\n      this.pageX = touch.pageX\n      this.pageY = touch.pageY\n    },\n    move (ev) {\n      if (this.disabled) {\n        return\n      }\n      if (ev.target.nodeName.toLowerCase() === 'button') {\n        ev.preventDefault()\n        return\n      }\n      if (this.pageX === undefined) {\n        ev.preventDefault()\n        return\n      }\n\n      const touch = ev.touches ? ev.touches[0] : ev\n      this.distX = touch.pageX - this.pageX\n      this.distY = touch.pageY - this.pageY\n\n      if (!this.direction) {\n        this.direction = this.distX > 0 ? 'left' : 'right'\n      }\n\n      if ((this.direction === 'right' && this.distX > 0 && this.hasRightMenu) || (this.direction === 'left' && this.distX < 0 && this.hasLeftMenu)) {\n        this.valid = true\n        ev.preventDefault()\n      }\n\n      if (this.valid === undefined) {\n        if (this.distX > 0 && this.hasLeftMenu === false) {\n          this.valid = false\n        } else if (this.distX < 0 && this.hasRightMenu === false) {\n          this.valid = false\n        } else if (Math.abs(this.distX) > this.sensitivity || Math.abs(this.distY) > this.sensitivity) {\n          this.valid = Math.abs(this.distX) > Math.abs(this.distY)\n        } else {\n          ev.preventDefault()\n        }\n      }\n\n      if (this.valid === true) {\n        if (Math.abs(this.distX) <= this.menuWidth) {\n          this.setOffset(this.distX, false)\n        } else {\n          const extra = (Math.abs(this.distX) - this.menuWidth) * 0.5\n          const offset = (this.menuWidth + extra) * (this.distX < 0 ? -1 : 1)\n          this.setOffset(offset, false)\n        }\n        ev.preventDefault()\n      }\n    },\n    end (ev) {\n      if (this.disabled) {\n        return\n      }\n      if (ev.target.nodeName.toLowerCase() === 'button') {\n        return\n      }\n      if (this.valid === true) {\n        if (this.distX < 0 && this.direction === 'right') {\n          const threshold = this.threshold <= 1 ? this.rightMenuWidth * this.threshold : this.threshold\n\n          if (this.distX < -threshold) {\n            this.setOffset(-this.rightMenuWidth, true)\n            this.$emit('on-open')\n            this.isOpen = true\n          } else {\n            this._setClose()\n          }\n        } else if (this.distX > 0 && this.direction === 'left') {\n          const threshold = this.threshold <= 1 ? this.leftMenuWidth * this.threshold : this.threshold\n\n          if (this.distX > threshold) {\n            this.setOffset(this.leftMenuWidth, true)\n            this.$emit('on-open')\n            this.isOpen = true\n          } else {\n            this._setClose()\n          }\n        }\n      } else if (this.pageX !== undefined) {}\n\n      this.pageX = this.pageY = this.valid = undefined\n      this.direction = ''\n    },\n    setOffset (x, animated = false, force) {\n      this.isAnimated = animated\n      if (this.disabled && !force) {\n        return\n      }\n      if ((this.direction === 'right' && x > 0) || (this.direction === 'left' && x < 0)) {\n        x = 0\n      }\n\n      if (x === 0) {\n        setTimeout(() => {\n          this.isOpen = false\n        }, 300)\n      }\n\n      if (x < 0 && Math.abs(x) === this.rightMenuWidth) {\n        this.distX = -this.rightMenuWidth\n      } else if (x > 0 && Math.abs(x) === this.leftMenuWidth) {\n        this.distX = this.leftMenuWidth\n      }\n      if (animated && this.target) {\n        this.target && this.target.classList.add('vux-swipeout-content-animated')\n        var cb = (function (self, target) {\n          return function () {\n            target.classList.remove('vux-swipeout-content-animated')\n            self.isAnimated = false\n            target.removeEventListener('webkitTransitionEnd', cb)\n            target.removeEventListener('transitionend', cb)\n          }\n        })(this, this.target)\n\n        this.target.addEventListener('webkitTransitionEnd', cb)\n        this.target.addEventListener('transitionend', cb)\n      }\n      this.styles.transform = 'translate3d(' + x + 'px, 0, 0)'\n    },\n    _setClose (delay = 0) {\n      this.setOffset(0, true)\n      this.$emit('on-close')\n      if (!delay) {\n        this.isOpen = false\n      } else {\n        setTimeout(() => {\n          this.isOpen = false\n        }, delay)\n      }\n      this.distX = 0\n    },\n    open (position = 'right') {\n      this.setOffset(position === 'right' ? -this.rightMenuWidth : this.leftMenuWidth, true, true)\n    },\n    close () {\n      this.setOffset(0, true, true)\n    }\n  },\n  computed: {\n    menuWidth () {\n      if (!this.hasLeftMenu && this.hasRightMenu) {\n        return this.rightMenuWidth\n      }\n      if (this.hasLeftMenu && !this.hasRightMenu) {\n        return this.leftMenuWidth\n      }\n      if (this.hasLeftMenu && this.hasRightMenu) {\n        return this.distX < 0 ? this.rightMenuWidth : this.leftMenuWidth\n      }\n    },\n    buttonBoxStyle () {\n      return {\n        backgroundColor: this.underlayColor\n      }\n    },\n    leftButtonBoxStyle () {\n      let styles = JSON.parse(JSON.stringify(this.buttonBoxStyle))\n      if (this.transitionMode === 'follow') {\n        let offset = this.styles.transform.indexOf('(0px, 0, 0)') === -1 ? this.leftMenuWidth - this.distX : this.leftMenuWidth\n        styles.transform = `translate3d(-${offset}px, 0, 0)`\n      }\n      return styles\n    },\n    rightButtonBoxStyle () {\n      let styles = JSON.parse(JSON.stringify(this.buttonBoxStyle))\n      if (this.transitionMode === 'follow') {\n        let offset = this.styles.transform.indexOf('(0px, 0, 0)') === -1 ? this.rightMenuWidth - Math.abs(this.distX) : this.rightMenuWidth\n        if (offset < 0) {\n          offset = 0\n        }\n        if (this.isAnimated) {\n          styles.transition = 'transform 0.2s'\n        }\n        styles.transform = `translate3d(${offset}px, 0, 0)`\n      }\n      return styles\n    }\n  },\n  data () {\n    return {\n      pageX: undefined,\n      pageY: undefined,\n      distX: 0,\n      distY: 0,\n      hasLeftMenu: false,\n      hasRightMenu: false,\n      animated: false,\n      isAnimated: false,\n      isOpen: false,\n      styles: {\n        transform: 'translate3d(0px, 0, 0)'\n      },\n      direction: '',\n      leftMenuWidth: 160,\n      rightMenuWidth: 160\n    }\n  },\n  watch: {\n    disabled (newVal, oldVal) {\n      if (newVal === true && !oldVal) {\n        this.setOffset(0, true, true)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["swipeout-item.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsfile":"swipeout-item.vue","sourceRoot":"node_modules/vux/src/components/swipeout","sourcesContent":["<template>\n  <div class=\"vux-swipeout-item\"\n  @touchstart=\"start\"\n  @mousedown=\"start\"\n  @touchmove=\"move\"\n  @mousemove=\"move\"\n  @touchend=\"end\"\n  @mouseup=\"end\"\n  @touchcancel=\"end\">\n    <div class=\"vux-swipeout-button-box vux-swipeout-button-box-left\" :style=\"leftButtonBoxStyle\" v-show=\"distX >= 0\">\n      <slot name=\"left-menu\"></slot>\n    </div>\n    <div class=\"vux-swipeout-button-box\" :style=\"rightButtonBoxStyle\" v-show=\"distX <= 0\">\n      <slot name=\"right-menu\"></slot>\n    </div>\n    <div class=\"vux-swipeout-content\" :style=\"styles\" @mousedown=\"onContentClick\" @touchstart=\"onContentClick\" ref=\"content\">\n      <slot name=\"content\"></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'swipeout-item',\n  props: {\n    sensitivity: {\n      type: Number,\n      default: 0\n    },\n    autoCloseOnButtonClick: {\n      type: Boolean,\n      default: true\n    },\n    disabled: Boolean,\n    threshold: {\n      type: Number,\n      default: 0.3\n    },\n    underlayColor: String,\n    transitionMode: {\n      type: String,\n      default: 'reveal'\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      this.render()\n    })\n  },\n  methods: {\n    render () {\n      this.target = this.$refs.content\n      if (this.$slots['left-menu']) {\n        this.hasLeftMenu = true\n        this.caculateMenuWidth('left')\n      }\n      if (this.$slots['right-menu']) {\n        this.hasRightMenu = true\n        this.caculateMenuWidth('right')\n      }\n    },\n    caculateMenuWidth (direction) {\n      const list = this.$slots[`${direction}-menu`][0].children.filter(one => one.tag)\n      let width = 0\n      list.forEach(one => {\n        const propsData = one.componentOptions ? one.componentOptions.propsData : {}\n        width += propsData.width || 80\n      })\n      this[`${direction}MenuWidth`] = width\n    },\n    onContentClick () {\n      if (this.styles.transform.indexOf('(0px, 0, 0)') === -1) {\n        this._setClose(200)\n      }\n    },\n    onItemClick () {\n      if (this.autoCloseOnButtonClick) {\n        this._setClose()\n      }\n    },\n    start (ev) {\n      if (this.disabled || this.isOpen || ev.target.nodeName.toLowerCase() === 'button') {\n        return\n      }\n      if (this.$parent.$options._componentTag === 'swipeout') {\n        const openItems = this.$parent.$children.filter(item => item.$data.styles.transform.indexOf('(0px, 0, 0)') === -1)\n        if (openItems.length > 0) {\n          openItems.forEach(item => {\n            item.setOffset(0, true)\n          })\n          ev.preventDefault()\n          return\n        }\n      }\n      const touch = ev.touches ? ev.touches[0] : ev\n      this.pageX = touch.pageX\n      this.pageY = touch.pageY\n    },\n    move (ev) {\n      if (this.disabled) {\n        return\n      }\n      if (ev.target.nodeName.toLowerCase() === 'button') {\n        ev.preventDefault()\n        return\n      }\n      if (this.pageX === undefined) {\n        ev.preventDefault()\n        return\n      }\n\n      const touch = ev.touches ? ev.touches[0] : ev\n      this.distX = touch.pageX - this.pageX\n      this.distY = touch.pageY - this.pageY\n\n      if (!this.direction) {\n        this.direction = this.distX > 0 ? 'left' : 'right'\n      }\n\n      if ((this.direction === 'right' && this.distX > 0 && this.hasRightMenu) || (this.direction === 'left' && this.distX < 0 && this.hasLeftMenu)) {\n        this.valid = true\n        ev.preventDefault()\n      }\n\n      if (this.valid === undefined) {\n        if (this.distX > 0 && this.hasLeftMenu === false) {\n          this.valid = false\n        } else if (this.distX < 0 && this.hasRightMenu === false) {\n          this.valid = false\n        } else if (Math.abs(this.distX) > this.sensitivity || Math.abs(this.distY) > this.sensitivity) {\n          this.valid = Math.abs(this.distX) > Math.abs(this.distY)\n        } else {\n          ev.preventDefault()\n        }\n      }\n\n      if (this.valid === true) {\n        if (Math.abs(this.distX) <= this.menuWidth) {\n          this.setOffset(this.distX, false)\n        } else {\n          const extra = (Math.abs(this.distX) - this.menuWidth) * 0.5\n          const offset = (this.menuWidth + extra) * (this.distX < 0 ? -1 : 1)\n          this.setOffset(offset, false)\n        }\n        ev.preventDefault()\n      }\n    },\n    end (ev) {\n      if (this.disabled) {\n        return\n      }\n      if (ev.target.nodeName.toLowerCase() === 'button') {\n        return\n      }\n      if (this.valid === true) {\n        if (this.distX < 0 && this.direction === 'right') {\n          const threshold = this.threshold <= 1 ? this.rightMenuWidth * this.threshold : this.threshold\n\n          if (this.distX < -threshold) {\n            this.setOffset(-this.rightMenuWidth, true)\n            this.$emit('on-open')\n            this.isOpen = true\n          } else {\n            this._setClose()\n          }\n        } else if (this.distX > 0 && this.direction === 'left') {\n          const threshold = this.threshold <= 1 ? this.leftMenuWidth * this.threshold : this.threshold\n\n          if (this.distX > threshold) {\n            this.setOffset(this.leftMenuWidth, true)\n            this.$emit('on-open')\n            this.isOpen = true\n          } else {\n            this._setClose()\n          }\n        }\n      } else if (this.pageX !== undefined) {}\n\n      this.pageX = this.pageY = this.valid = undefined\n      this.direction = ''\n    },\n    setOffset (x, animated = false, force) {\n      this.isAnimated = animated\n      if (this.disabled && !force) {\n        return\n      }\n      if ((this.direction === 'right' && x > 0) || (this.direction === 'left' && x < 0)) {\n        x = 0\n      }\n\n      if (x === 0) {\n        setTimeout(() => {\n          this.isOpen = false\n        }, 300)\n      }\n\n      if (x < 0 && Math.abs(x) === this.rightMenuWidth) {\n        this.distX = -this.rightMenuWidth\n      } else if (x > 0 && Math.abs(x) === this.leftMenuWidth) {\n        this.distX = this.leftMenuWidth\n      }\n      if (animated && this.target) {\n        this.target && this.target.classList.add('vux-swipeout-content-animated')\n        var cb = (function (self, target) {\n          return function () {\n            target.classList.remove('vux-swipeout-content-animated')\n            self.isAnimated = false\n            target.removeEventListener('webkitTransitionEnd', cb)\n            target.removeEventListener('transitionend', cb)\n          }\n        })(this, this.target)\n\n        this.target.addEventListener('webkitTransitionEnd', cb)\n        this.target.addEventListener('transitionend', cb)\n      }\n      this.styles.transform = 'translate3d(' + x + 'px, 0, 0)'\n    },\n    _setClose (delay = 0) {\n      this.setOffset(0, true)\n      this.$emit('on-close')\n      if (!delay) {\n        this.isOpen = false\n      } else {\n        setTimeout(() => {\n          this.isOpen = false\n        }, delay)\n      }\n      this.distX = 0\n    },\n    open (position = 'right') {\n      this.setOffset(position === 'right' ? -this.rightMenuWidth : this.leftMenuWidth, true, true)\n    },\n    close () {\n      this.setOffset(0, true, true)\n    }\n  },\n  computed: {\n    menuWidth () {\n      if (!this.hasLeftMenu && this.hasRightMenu) {\n        return this.rightMenuWidth\n      }\n      if (this.hasLeftMenu && !this.hasRightMenu) {\n        return this.leftMenuWidth\n      }\n      if (this.hasLeftMenu && this.hasRightMenu) {\n        return this.distX < 0 ? this.rightMenuWidth : this.leftMenuWidth\n      }\n    },\n    buttonBoxStyle () {\n      return {\n        backgroundColor: this.underlayColor\n      }\n    },\n    leftButtonBoxStyle () {\n      let styles = JSON.parse(JSON.stringify(this.buttonBoxStyle))\n      if (this.transitionMode === 'follow') {\n        let offset = this.styles.transform.indexOf('(0px, 0, 0)') === -1 ? this.leftMenuWidth - this.distX : this.leftMenuWidth\n        styles.transform = `translate3d(-${offset}px, 0, 0)`\n      }\n      return styles\n    },\n    rightButtonBoxStyle () {\n      let styles = JSON.parse(JSON.stringify(this.buttonBoxStyle))\n      if (this.transitionMode === 'follow') {\n        let offset = this.styles.transform.indexOf('(0px, 0, 0)') === -1 ? this.rightMenuWidth - Math.abs(this.distX) : this.rightMenuWidth\n        if (offset < 0) {\n          offset = 0\n        }\n        if (this.isAnimated) {\n          styles.transition = 'transform 0.2s'\n        }\n        styles.transform = `translate3d(${offset}px, 0, 0)`\n      }\n      return styles\n    }\n  },\n  data () {\n    return {\n      pageX: undefined,\n      pageY: undefined,\n      distX: 0,\n      distY: 0,\n      hasLeftMenu: false,\n      hasRightMenu: false,\n      animated: false,\n      isAnimated: false,\n      isOpen: false,\n      styles: {\n        transform: 'translate3d(0px, 0, 0)'\n      },\n      direction: '',\n      leftMenuWidth: 160,\n      rightMenuWidth: 160\n    }\n  },\n  watch: {\n    disabled (newVal, oldVal) {\n      if (newVal === true && !oldVal) {\n        this.setOffset(0, true, true)\n      }\n    }\n  }\n}\n</script>\n"]}]}