{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/checker/checker-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/checker/checker-item.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'checker-item',\n  props: {\n    value: {\n      type: [String, Number, Object],\n      required: true\n    },\n    disabled: Boolean\n  },\n  watch: {\n    disabled (val) {\n      if (val && this.$parent.type === 'radio' && this.value === this.$parent.currentValue) {\n        this.$parent.currentValue = ''\n      }\n    }\n  },\n  computed: {\n    classNames () {\n      const isSimpleValue = typeof this.value === 'string' || typeof this.value === 'number'\n      const names = {\n        'vux-tap-active': !this.disabled\n      }\n\n      if (this.$parent.defaultItemClass) {\n        names[this.$parent.defaultItemClass] = true\n      }\n\n      if (this.$parent.selectedItemClass) {\n        let selected = false\n        if (this.$parent.type === 'radio') {\n          if (isSimpleValue && this.$parent.currentValue === this.value) {\n            selected = true\n          } else if (typeof this.value === 'object' && isEqual(this.$parent.currentValue, this.value)) {\n            selected = true\n          }\n        } else {\n          if (typeof this.value === 'string') {\n            if (this.$parent.currentValue.indexOf(this.value) > -1) {\n              selected = true\n            }\n          } else if (this.$parent.currentValue && this.$parent.currentValue.length) {\n            const match = this.$parent.currentValue.filter(one => {\n              return isEqual(one, this.value)\n            })\n            selected = match.length > 0\n          }\n        }\n        names[this.$parent.selectedItemClass] = selected\n      }\n\n      if (this.$parent.disabledItemClass) {\n        names[this.$parent.disabledItemClass] = this.disabled\n      }\n\n      return names\n    }\n  },\n  methods: {\n    select () {\n      if (this.$parent.type === 'radio') {\n        this.selectRadio()\n      } else {\n        this.selectCheckbox()\n      }\n    },\n    selectRadio () {\n      if (!this.disabled) {\n        if (this.$parent.currentValue === this.value) {\n          if (!this.$parent.radioRequired) {\n            this.$parent.currentValue = ''\n          }\n        } else {\n          this.$parent.currentValue = this.value\n        }\n      }\n      this.$emit('on-item-click', this.value, this.disabled)\n    },\n    selectCheckbox () {\n      if (!this.$parent.currentValue || this.$parent.currentValue === null) {\n        this.$parent.currentValue = []\n      }\n      const isSimpleValue = typeof this.value === 'string' || typeof this.value === 'number'\n      if (!this.disabled) {\n        let index = -1\n        if (isSimpleValue) {\n          index = this.$parent.currentValue.indexOf(this.value)\n        } else {\n          index = this.$parent.currentValue.map(one => JSON.stringify(one)).indexOf(JSON.stringify(this.value))\n        }\n        if (index > -1) {\n          this.$parent.currentValue.splice(index, 1)\n        } else {\n          if (!this.$parent.max || (this.$parent.max && (this.$parent.currentValue !== null && this.$parent.currentValue.length < this.$parent.max))) {\n            if (!this.$parent.currentValue || !this.$parent.currentValue.length) {\n              this.$parent.currentValue = []\n            }\n            this.$parent.currentValue.push(this.value)\n          }\n        }\n      }\n      this.$emit('on-item-click', this.value, this.disabled)\n    }\n  }\n}\n\nfunction isEqual (obj1, obj2) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2)\n}\n",{"version":3,"sources":["checker-item.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"checker-item.vue","sourceRoot":"node_modules/vux/src/components/checker","sourcesContent":["<template>\n  <div class=\"vux-checker-item\" :class=\"classNames\" @click=\"select\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'checker-item',\n  props: {\n    value: {\n      type: [String, Number, Object],\n      required: true\n    },\n    disabled: Boolean\n  },\n  watch: {\n    disabled (val) {\n      if (val && this.$parent.type === 'radio' && this.value === this.$parent.currentValue) {\n        this.$parent.currentValue = ''\n      }\n    }\n  },\n  computed: {\n    classNames () {\n      const isSimpleValue = typeof this.value === 'string' || typeof this.value === 'number'\n      const names = {\n        'vux-tap-active': !this.disabled\n      }\n\n      if (this.$parent.defaultItemClass) {\n        names[this.$parent.defaultItemClass] = true\n      }\n\n      if (this.$parent.selectedItemClass) {\n        let selected = false\n        if (this.$parent.type === 'radio') {\n          if (isSimpleValue && this.$parent.currentValue === this.value) {\n            selected = true\n          } else if (typeof this.value === 'object' && isEqual(this.$parent.currentValue, this.value)) {\n            selected = true\n          }\n        } else {\n          if (typeof this.value === 'string') {\n            if (this.$parent.currentValue.indexOf(this.value) > -1) {\n              selected = true\n            }\n          } else if (this.$parent.currentValue && this.$parent.currentValue.length) {\n            const match = this.$parent.currentValue.filter(one => {\n              return isEqual(one, this.value)\n            })\n            selected = match.length > 0\n          }\n        }\n        names[this.$parent.selectedItemClass] = selected\n      }\n\n      if (this.$parent.disabledItemClass) {\n        names[this.$parent.disabledItemClass] = this.disabled\n      }\n\n      return names\n    }\n  },\n  methods: {\n    select () {\n      if (this.$parent.type === 'radio') {\n        this.selectRadio()\n      } else {\n        this.selectCheckbox()\n      }\n    },\n    selectRadio () {\n      if (!this.disabled) {\n        if (this.$parent.currentValue === this.value) {\n          if (!this.$parent.radioRequired) {\n            this.$parent.currentValue = ''\n          }\n        } else {\n          this.$parent.currentValue = this.value\n        }\n      }\n      this.$emit('on-item-click', this.value, this.disabled)\n    },\n    selectCheckbox () {\n      if (!this.$parent.currentValue || this.$parent.currentValue === null) {\n        this.$parent.currentValue = []\n      }\n      const isSimpleValue = typeof this.value === 'string' || typeof this.value === 'number'\n      if (!this.disabled) {\n        let index = -1\n        if (isSimpleValue) {\n          index = this.$parent.currentValue.indexOf(this.value)\n        } else {\n          index = this.$parent.currentValue.map(one => JSON.stringify(one)).indexOf(JSON.stringify(this.value))\n        }\n        if (index > -1) {\n          this.$parent.currentValue.splice(index, 1)\n        } else {\n          if (!this.$parent.max || (this.$parent.max && (this.$parent.currentValue !== null && this.$parent.currentValue.length < this.$parent.max))) {\n            if (!this.$parent.currentValue || !this.$parent.currentValue.length) {\n              this.$parent.currentValue = []\n            }\n            this.$parent.currentValue.push(this.value)\n          }\n        }\n      }\n      this.$emit('on-item-click', this.value, this.disabled)\n    }\n  }\n}\n\nfunction isEqual (obj1, obj2) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2)\n}\n</script>\n\n<style lang=\"less\">\n@import '../../styles/tap.less';\n</style>\n"]}]}