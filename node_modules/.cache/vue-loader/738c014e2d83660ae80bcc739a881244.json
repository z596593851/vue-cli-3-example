{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/x-address/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/x-address/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport name2value from '../../filters/name2value'\nimport value2name from '../../filters/value2name'\nimport PopupPicker from '../popup-picker'\n\nexport default {\n  name: 'x-address',\n  components: {\n    PopupPicker\n  },\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    rawValue: Boolean,\n    list: {\n      type: Array,\n      required: true\n    },\n    labelWidth: String,\n    inlineDesc: String,\n    placeholder: String,\n    hideDistrict: Boolean,\n    valueTextAlign: String,\n    confirmText: String,\n    cancelText: String,\n    displayFormat: {\n      type: Function,\n      default: (val, names) => names\n    },\n    popupStyle: Object,\n    popupTitle: String,\n    show: Boolean,\n    disabled: Boolean\n  },\n  created () {\n    if (this.currentValue.length && this.rawValue) {\n      const parsedVal = name2value(this.currentValue, this.list)\n      if (/__/.test(parsedVal)) {\n        console.error('[VUX] Wrong address value', this.currentValue)\n        this.currentValue = []\n      } else {\n        this.currentValue = parsedVal.split(' ')\n      }\n    }\n    if (this.show) {\n      this.showValue = true\n    }\n  },\n  methods: {\n    emitHide (val) {\n      this.$emit('on-hide', val)\n    },\n    getAddressName () {\n      return value2name(this.value, this.list)\n    },\n    onShadowChange (ids, names) {\n      this.$emit('on-shadow-change', ids, names)\n    }\n  },\n  data () {\n    return {\n      currentValue: this.value,\n      showValue: false\n    }\n  },\n  computed: {\n    nameValue () {\n      return value2name(this.currentValue, this.list)\n    },\n    labelClass () {\n      return {\n        'vux-cell-justify': this.$parent && (this.$parent.labelAlign === 'justify' || this.$parent.$parent.labelAlign === 'justify')\n      }\n    }\n  },\n  watch: {\n    currentValue (val) {\n      this.$emit('input', val)\n    },\n    value (val) {\n      if (val.length && !/\\d+/.test(val[0])) {\n        const id = name2value(val, this.list).split(' ')\n        if (id[0] !== '__' && id[1] !== '__') {\n          this.currentValue = id\n          return\n        }\n      }\n      this.currentValue = val\n    },\n    show (val) {\n      this.showValue = val\n    },\n    showValue (val) {\n      this.$emit('update:show', val)\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"index.vue","sourceRoot":"node_modules/vux/src/components/x-address","sourcesContent":["<template>\n  <popup-picker\n    :fixed-columns=\"hideDistrict ? 2 : 0\"\n    :columns=\"3\"\n    :data=\"list\"\n    :title=\"title\"\n    v-model=\"currentValue\"\n    show-name\n    :inline-desc=\"inlineDesc\"\n    :placeholder=\"placeholder\"\n    :value-text-align=\"valueTextAlign\"\n    :confirm-text=\"confirmText\"\n    :cancel-text=\"cancelText\"\n    :display-format=\"displayFormat\"\n    :popup-style=\"popupStyle\"\n    :popup-title=\"popupTitle\"\n    :show.sync=\"showValue\"\n    :disabled=\"disabled\"\n    @on-shadow-change=\"onShadowChange\"\n    @on-hide=\"emitHide\"\n    @on-show=\"$emit('on-show')\">\n    <template slot=\"title\" slot-scope=\"props\">\n      <slot\n        name=\"title\"\n        :label-class=\"props.labelClass\"\n        :label-style=\"props.labelStyles\"\n        :label-title=\"props.title\">\n        <label\n          :class=\"[props.labelClass,labelClass]\"\n          :style=\"props.labelStyle\"\n          v-if=\"props.labelTitle\"\n          v-html=\"props.labelTitle\"></label>\n      </slot>\n    </template>\n  </popup-picker>\n</template>\n\n<script>\nimport name2value from '../../filters/name2value'\nimport value2name from '../../filters/value2name'\nimport PopupPicker from '../popup-picker'\n\nexport default {\n  name: 'x-address',\n  components: {\n    PopupPicker\n  },\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    rawValue: Boolean,\n    list: {\n      type: Array,\n      required: true\n    },\n    labelWidth: String,\n    inlineDesc: String,\n    placeholder: String,\n    hideDistrict: Boolean,\n    valueTextAlign: String,\n    confirmText: String,\n    cancelText: String,\n    displayFormat: {\n      type: Function,\n      default: (val, names) => names\n    },\n    popupStyle: Object,\n    popupTitle: String,\n    show: Boolean,\n    disabled: Boolean\n  },\n  created () {\n    if (this.currentValue.length && this.rawValue) {\n      const parsedVal = name2value(this.currentValue, this.list)\n      if (/__/.test(parsedVal)) {\n        console.error('[VUX] Wrong address value', this.currentValue)\n        this.currentValue = []\n      } else {\n        this.currentValue = parsedVal.split(' ')\n      }\n    }\n    if (this.show) {\n      this.showValue = true\n    }\n  },\n  methods: {\n    emitHide (val) {\n      this.$emit('on-hide', val)\n    },\n    getAddressName () {\n      return value2name(this.value, this.list)\n    },\n    onShadowChange (ids, names) {\n      this.$emit('on-shadow-change', ids, names)\n    }\n  },\n  data () {\n    return {\n      currentValue: this.value,\n      showValue: false\n    }\n  },\n  computed: {\n    nameValue () {\n      return value2name(this.currentValue, this.list)\n    },\n    labelClass () {\n      return {\n        'vux-cell-justify': this.$parent && (this.$parent.labelAlign === 'justify' || this.$parent.$parent.labelAlign === 'justify')\n      }\n    }\n  },\n  watch: {\n    currentValue (val) {\n      this.$emit('input', val)\n    },\n    value (val) {\n      if (val.length && !/\\d+/.test(val[0])) {\n        const id = name2value(val, this.list).split(' ')\n        if (id[0] !== '__' && id[1] !== '__') {\n          this.currentValue = id\n          return\n        }\n      }\n      this.currentValue = val\n    },\n    show (val) {\n      this.showValue = val\n    },\n    showValue (val) {\n      this.$emit('update:show', val)\n    }\n  }\n}\n</script>\n"]}]}