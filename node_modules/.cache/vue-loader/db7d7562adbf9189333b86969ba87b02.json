{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/template-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/x-input/index.vue?vue&type=template&id=b06bfc72&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/x-input/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/template-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"vux-x-input weui-cell\",\n      class: {\n        \"weui-cell_warn\": _vm.showWarn,\n        disabled: _vm.disabled,\n        \"vux-x-input-has-right-full\": _vm.hasRightFullHeightSlot\n      }\n    },\n    [\n      _c(\n        \"div\",\n        { staticClass: \"weui-cell__hd\" },\n        [\n          _vm.hasRestrictedLabel\n            ? _c(\n                \"div\",\n                { style: _vm.labelStyles },\n                [_vm._t(\"restricted-label\")],\n                2\n              )\n            : _vm._e(),\n          _vm._t(\"label\", [\n            _vm.title\n              ? _c(\"label\", {\n                  staticClass: \"weui-label\",\n                  class: _vm.labelClass,\n                  style: {\n                    width:\n                      _vm.labelWidth ||\n                      _vm.$parent.labelWidth ||\n                      _vm.labelWidthComputed,\n                    textAlign: _vm.$parent.labelAlign,\n                    marginRight: _vm.$parent.labelMarginRight\n                  },\n                  attrs: { for: \"vux-x-input-\" + _vm.uuid },\n                  domProps: { innerHTML: _vm._s(_vm.title) }\n                })\n              : _vm._e(),\n            _vm.inlineDesc\n              ? _c(\"inline-desc\", [_vm._v(_vm._s(_vm.inlineDesc))])\n              : _vm._e()\n          ])\n        ],\n        2\n      ),\n      _c(\n        \"div\",\n        {\n          staticClass: \"weui-cell__bd weui-cell__primary\",\n          class: _vm.placeholderAlign\n            ? \"vux-x-input-placeholder-\" + _vm.placeholderAlign\n            : \"\"\n        },\n        [\n          !_vm.type || _vm.type === \"text\"\n            ? _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.currentValue,\n                    expression: \"currentValue\"\n                  }\n                ],\n                ref: \"input\",\n                staticClass: \"weui-input\",\n                style: _vm.inputStyle,\n                attrs: {\n                  id: \"vux-x-input-\" + _vm.uuid,\n                  maxlength: _vm.max,\n                  autocomplete: _vm.autocomplete,\n                  autocapitalize: _vm.autocapitalize,\n                  autocorrect: _vm.autocorrect,\n                  spellcheck: _vm.spellcheck,\n                  type: \"text\",\n                  name: _vm.name,\n                  pattern: _vm.pattern,\n                  placeholder: _vm.placeholder,\n                  readonly: _vm.readonly,\n                  disabled: _vm.disabled\n                },\n                domProps: { value: _vm.currentValue },\n                on: {\n                  focus: _vm.focusHandler,\n                  blur: _vm.onBlur,\n                  keyup: _vm.onKeyUp,\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.currentValue = $event.target.value\n                  }\n                }\n              })\n            : _vm._e(),\n          _vm.type === \"number\"\n            ? _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.currentValue,\n                    expression: \"currentValue\"\n                  }\n                ],\n                ref: \"input\",\n                staticClass: \"weui-input\",\n                style: _vm.inputStyle,\n                attrs: {\n                  id: \"vux-x-input-\" + _vm.uuid,\n                  maxlength: _vm.max,\n                  autocomplete: _vm.autocomplete,\n                  autocapitalize: _vm.autocapitalize,\n                  autocorrect: _vm.autocorrect,\n                  spellcheck: _vm.spellcheck,\n                  type: \"number\",\n                  name: _vm.name,\n                  pattern: _vm.pattern,\n                  placeholder: _vm.placeholder,\n                  readonly: _vm.readonly,\n                  disabled: _vm.disabled\n                },\n                domProps: { value: _vm.currentValue },\n                on: {\n                  focus: _vm.focusHandler,\n                  blur: _vm.onBlur,\n                  keyup: _vm.onKeyUp,\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.currentValue = $event.target.value\n                  }\n                }\n              })\n            : _vm._e(),\n          _vm.type === \"email\"\n            ? _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.currentValue,\n                    expression: \"currentValue\"\n                  }\n                ],\n                ref: \"input\",\n                staticClass: \"weui-input\",\n                style: _vm.inputStyle,\n                attrs: {\n                  id: \"vux-x-input-\" + _vm.uuid,\n                  maxlength: _vm.max,\n                  autocomplete: _vm.autocomplete,\n                  autocapitalize: _vm.autocapitalize,\n                  autocorrect: _vm.autocorrect,\n                  spellcheck: _vm.spellcheck,\n                  type: \"email\",\n                  name: _vm.name,\n                  pattern: _vm.pattern,\n                  placeholder: _vm.placeholder,\n                  readonly: _vm.readonly,\n                  disabled: _vm.disabled\n                },\n                domProps: { value: _vm.currentValue },\n                on: {\n                  focus: _vm.focusHandler,\n                  blur: _vm.onBlur,\n                  keyup: _vm.onKeyUp,\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.currentValue = $event.target.value\n                  }\n                }\n              })\n            : _vm._e(),\n          _vm.type === \"password\"\n            ? _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.currentValue,\n                    expression: \"currentValue\"\n                  }\n                ],\n                ref: \"input\",\n                staticClass: \"weui-input\",\n                style: _vm.inputStyle,\n                attrs: {\n                  id: \"vux-x-input-\" + _vm.uuid,\n                  maxlength: _vm.max,\n                  autocomplete: _vm.autocomplete,\n                  autocapitalize: _vm.autocapitalize,\n                  autocorrect: _vm.autocorrect,\n                  spellcheck: _vm.spellcheck,\n                  type: \"password\",\n                  name: _vm.name,\n                  pattern: _vm.pattern,\n                  placeholder: _vm.placeholder,\n                  readonly: _vm.readonly,\n                  disabled: _vm.disabled\n                },\n                domProps: { value: _vm.currentValue },\n                on: {\n                  focus: _vm.focusHandler,\n                  blur: _vm.onBlur,\n                  keyup: _vm.onKeyUp,\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.currentValue = $event.target.value\n                  }\n                }\n              })\n            : _vm._e(),\n          _vm.type === \"tel\"\n            ? _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.currentValue,\n                    expression: \"currentValue\"\n                  }\n                ],\n                ref: \"input\",\n                staticClass: \"weui-input\",\n                style: _vm.inputStyle,\n                attrs: {\n                  id: \"vux-x-input-\" + _vm.uuid,\n                  maxlength: _vm.max,\n                  autocomplete: _vm.autocomplete,\n                  autocapitalize: _vm.autocapitalize,\n                  autocorrect: _vm.autocorrect,\n                  spellcheck: _vm.spellcheck,\n                  type: \"tel\",\n                  name: _vm.name,\n                  pattern: _vm.pattern,\n                  placeholder: _vm.placeholder,\n                  readonly: _vm.readonly,\n                  disabled: _vm.disabled\n                },\n                domProps: { value: _vm.currentValue },\n                on: {\n                  focus: _vm.focusHandler,\n                  blur: _vm.onBlur,\n                  keyup: _vm.onKeyUp,\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.currentValue = $event.target.value\n                  }\n                }\n              })\n            : _vm._e()\n        ]\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"weui-cell__ft\" },\n        [\n          _c(\"icon\", {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value:\n                  !_vm.hasRightFullHeightSlot &&\n                  !_vm.equalWith &&\n                  _vm.showClear &&\n                  _vm.currentValue !== \"\" &&\n                  !_vm.readonly &&\n                  !_vm.disabled &&\n                  _vm.isFocus,\n                expression:\n                  \"!hasRightFullHeightSlot && !equalWith && showClear && currentValue !== '' && !readonly && !disabled && isFocus\"\n              }\n            ],\n            attrs: { type: \"clear\" },\n            nativeOn: {\n              click: function($event) {\n                return _vm.clear($event)\n              }\n            }\n          }),\n          _c(\"icon\", {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.showWarn,\n                expression: \"showWarn\"\n              }\n            ],\n            staticClass: \"vux-input-icon\",\n            attrs: { type: \"warn\", title: !_vm.valid ? _vm.firstError : \"\" },\n            nativeOn: {\n              click: function($event) {\n                return _vm.onClickErrorIcon($event)\n              }\n            }\n          }),\n          !_vm.novalidate &&\n          _vm.hasLengthEqual &&\n          _vm.dirty &&\n          _vm.equalWith &&\n          !_vm.valid\n            ? _c(\"icon\", {\n                staticClass: \"vux-input-icon\",\n                attrs: { type: \"warn\" },\n                nativeOn: {\n                  click: function($event) {\n                    return _vm.onClickErrorIcon($event)\n                  }\n                }\n              })\n            : _vm._e(),\n          _c(\"icon\", {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value:\n                  !_vm.novalidate &&\n                  _vm.equalWith &&\n                  _vm.equalWith === _vm.currentValue &&\n                  _vm.valid,\n                expression:\n                  \"!novalidate && equalWith && equalWith === currentValue && valid\"\n              }\n            ],\n            attrs: { type: \"success\" }\n          }),\n          _c(\"icon\", {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.novalidate && _vm.iconType === \"success\",\n                expression: \"novalidate && iconType === 'success'\"\n              }\n            ],\n            staticClass: \"vux-input-icon\",\n            attrs: { type: \"success\" }\n          }),\n          _c(\"icon\", {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.novalidate && _vm.iconType === \"error\",\n                expression: \"novalidate && iconType === 'error'\"\n              }\n            ],\n            staticClass: \"vux-input-icon\",\n            attrs: { type: \"warn\" }\n          }),\n          _vm._t(\"right\"),\n          _vm.hasRightFullHeightSlot\n            ? _c(\n                \"div\",\n                { staticClass: \"vux-x-input-right-full\" },\n                [_vm._t(\"right-full-height\")],\n                2\n              )\n            : _vm._e()\n        ],\n        2\n      ),\n      _c(\n        \"toast\",\n        {\n          attrs: { type: \"text\", width: \"auto\", time: 600 },\n          model: {\n            value: _vm.showErrorToast,\n            callback: function($$v) {\n              _vm.showErrorToast = $$v\n            },\n            expression: \"showErrorToast\"\n          }\n        },\n        [_vm._v(_vm._s(_vm.firstError))]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}