{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/previewer/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/previewer/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PhotoSwipe from 'x-photoswipe/dist/photoswipe'\nimport UI from 'x-photoswipe/dist/photoswipe-ui-default'\nimport objectAssign from 'object-assign'\n\nexport default {\n  name: 'previewer',\n  computed: {\n    imgs () {\n      return this.list.map(one => {\n        if (!one.msrc) {\n          one.msrc = one.src\n        }\n        if (typeof one.w === 'undefined') {\n          one.w = 0\n          one.h = 0\n        }\n        return one\n      })\n    }\n  },\n  watch: {\n    imgs (newVal, oldVal) {\n      if (!this.photoswipe) {\n        return\n      }\n      if (newVal.length && newVal.length - oldVal.length === -1) {\n        const index = this.photoswipe.getCurrentIndex()\n        this.photoswipe.invalidateCurrItems()\n        this.photoswipe.items.splice(index, 1)\n        let goToIndex = index\n        if (goToIndex > this.photoswipe.items.length - 1) {\n          goToIndex = 0\n        }\n        this.photoswipe.goTo(goToIndex)\n        this.photoswipe.updateSize(true)\n        this.photoswipe.ui.update()\n      } else if (!newVal.length) {\n        this.close()\n      }\n    }\n  },\n  methods: {\n    init (index) {\n      const self = this\n      const showItem = this.imgs[index]\n      if (!showItem.w || !showItem.h || showItem.w < 5 || showItem.h < 5) {\n        const img = new Image()\n        img.onload = function () {\n          showItem.w = this.width\n          showItem.h = this.height\n          self.doInit(index)\n        }\n        img.src = showItem.src\n      } else {\n        this.doInit(index)\n      }\n    },\n    doInit (index) {\n      const self = this\n      let options = objectAssign({\n        history: false,\n        shareEl: false,\n        tapToClose: true,\n        index: index\n      }, this.options)\n      this.photoswipe = new PhotoSwipe(this.$el, UI, this.imgs, options)\n\n      this.photoswipe.listen('gettingData', function (index, item) {\n        if (!item.w || !item.h || item.w < 1 || item.h < 1) {\n          const img = new Image()\n          img.onload = function () {\n            item.w = this.width\n            item.h = this.height\n            self.photoswipe.updateSize(true)\n          }\n          img.src = item.src\n        }\n      })\n\n      this.photoswipe.init()\n      this.photoswipe.listen('close', () => {\n        this.$emit('on-close')\n      })\n      this.photoswipe.listen('afterChange', (a, b) => {\n        this.$emit('on-index-change', {\n          currentIndex: this.photoswipe.getCurrentIndex()\n        })\n      })\n    },\n    show (index) {\n      this.init(index)\n    },\n    getCurrentIndex () {\n      if (this.photoswipe) {\n        return this.photoswipe.getCurrentIndex()\n      }\n    },\n    close () {\n      this.photoswipe && this.photoswipe.close()\n    },\n    goTo (index) {\n      this.photoswipe && this.photoswipe.goTo(index)\n    },\n    prev () {\n      this.photoswipe && this.photoswipe.prev()\n    },\n    next () {\n      this.photoswipe && this.photoswipe.next()\n    }\n  },\n  props: {\n    list: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      default: 0\n    },\n    options: {\n      type: Object,\n      default () {\n        return {}\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"index.vue","sourceRoot":"node_modules/vux/src/components/previewer","sourcesContent":["<template>\n  <!-- Root element of PhotoSwipe. Must have class pswp. -->\n  <div class=\"pswp vux-previewer\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n    <!-- Background of PhotoSwipe.\n         It's a separate element as animating opacity is faster than rgba(). -->\n    <div class=\"pswp__bg\"></div>\n    <!-- Slides wrapper with overflow:hidden. -->\n    <div class=\"pswp__scroll-wrap\">\n      <!-- Container that holds slides.\n        PhotoSwipe keeps only 3 of them in the DOM to save memory.\n        Don't modify these 3 pswp__item elements, data is added later on. -->\n      <div class=\"pswp__container\">\n        <div class=\"pswp__item\"></div>\n        <div class=\"pswp__item\"></div>\n        <div class=\"pswp__item\"></div>\n      </div>\n      <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->\n      <div class=\"pswp__ui pswp__ui--hidden\">\n        <div class=\"pswp__top-bar\">\n          <!--  Controls are self-explanatory. Order can be changed. -->\n          <div class=\"pswp__counter\"></div>\n          <slot name=\"button-after\"></slot>\n          <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\n          <button class=\"pswp__button pswp__button--share\" title=\"Share\"></button>\n          <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\n          <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\n          <slot name=\"button-before\"></slot>\n          <!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR -->\n          <!-- element will get class pswp__preloader--active when preloader is running -->\n          <div class=\"pswp__preloader\">\n            <div class=\"pswp__preloader__icn\">\n              <div class=\"pswp__preloader__cut\">\n                <div class=\"pswp__preloader__donut\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\n          <div class=\"pswp__share-tooltip\"></div>\n        </div>\n        <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"></button>\n        <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"></button>\n        <div class=\"pswp__caption\">\n          <div class=\"pswp__caption__center\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PhotoSwipe from 'x-photoswipe/dist/photoswipe'\nimport UI from 'x-photoswipe/dist/photoswipe-ui-default'\nimport objectAssign from 'object-assign'\n\nexport default {\n  name: 'previewer',\n  computed: {\n    imgs () {\n      return this.list.map(one => {\n        if (!one.msrc) {\n          one.msrc = one.src\n        }\n        if (typeof one.w === 'undefined') {\n          one.w = 0\n          one.h = 0\n        }\n        return one\n      })\n    }\n  },\n  watch: {\n    imgs (newVal, oldVal) {\n      if (!this.photoswipe) {\n        return\n      }\n      if (newVal.length && newVal.length - oldVal.length === -1) {\n        const index = this.photoswipe.getCurrentIndex()\n        this.photoswipe.invalidateCurrItems()\n        this.photoswipe.items.splice(index, 1)\n        let goToIndex = index\n        if (goToIndex > this.photoswipe.items.length - 1) {\n          goToIndex = 0\n        }\n        this.photoswipe.goTo(goToIndex)\n        this.photoswipe.updateSize(true)\n        this.photoswipe.ui.update()\n      } else if (!newVal.length) {\n        this.close()\n      }\n    }\n  },\n  methods: {\n    init (index) {\n      const self = this\n      const showItem = this.imgs[index]\n      if (!showItem.w || !showItem.h || showItem.w < 5 || showItem.h < 5) {\n        const img = new Image()\n        img.onload = function () {\n          showItem.w = this.width\n          showItem.h = this.height\n          self.doInit(index)\n        }\n        img.src = showItem.src\n      } else {\n        this.doInit(index)\n      }\n    },\n    doInit (index) {\n      const self = this\n      let options = objectAssign({\n        history: false,\n        shareEl: false,\n        tapToClose: true,\n        index: index\n      }, this.options)\n      this.photoswipe = new PhotoSwipe(this.$el, UI, this.imgs, options)\n\n      this.photoswipe.listen('gettingData', function (index, item) {\n        if (!item.w || !item.h || item.w < 1 || item.h < 1) {\n          const img = new Image()\n          img.onload = function () {\n            item.w = this.width\n            item.h = this.height\n            self.photoswipe.updateSize(true)\n          }\n          img.src = item.src\n        }\n      })\n\n      this.photoswipe.init()\n      this.photoswipe.listen('close', () => {\n        this.$emit('on-close')\n      })\n      this.photoswipe.listen('afterChange', (a, b) => {\n        this.$emit('on-index-change', {\n          currentIndex: this.photoswipe.getCurrentIndex()\n        })\n      })\n    },\n    show (index) {\n      this.init(index)\n    },\n    getCurrentIndex () {\n      if (this.photoswipe) {\n        return this.photoswipe.getCurrentIndex()\n      }\n    },\n    close () {\n      this.photoswipe && this.photoswipe.close()\n    },\n    goTo (index) {\n      this.photoswipe && this.photoswipe.goTo(index)\n    },\n    prev () {\n      this.photoswipe && this.photoswipe.prev()\n    },\n    next () {\n      this.photoswipe && this.photoswipe.next()\n    }\n  },\n  props: {\n    list: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      default: 0\n    },\n    options: {\n      type: Object,\n      default () {\n        return {}\n      }\n    }\n  }\n}\n</script>\n\n<style src=\"x-photoswipe/dist/photoswipe.css\"></style>\n<style src=\"x-photoswipe/dist/default-skin/default-skin.css\"></style>\n"]}]}