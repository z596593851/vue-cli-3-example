{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/popup/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/popup/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Popup from './popup'\nimport dom from '../../libs/dom'\n\nexport default {\n  name: 'popup',\n  props: {\n    value: Boolean,\n    height: {\n      type: String,\n      default: 'auto'\n    },\n    width: {\n      type: String,\n      default: 'auto'\n    },\n    showMask: {\n      type: Boolean,\n      default: true\n    },\n    isTransparent: Boolean,\n    hideOnBlur: {\n      type: Boolean,\n      default: true\n    },\n    position: {\n      type: String,\n      default: 'bottom'\n    },\n    maxHeight: String,\n    popupStyle: Object,\n    hideOnDeactivated: {\n      type: Boolean,\n      default: true\n    },\n    shouldRerenderOnShow: {\n      type: Boolean,\n      default: false\n    },\n    shouldScrollTopOnShow: {\n      type: Boolean,\n      default: false\n    }\n  },\n  created () {\n    // get global layout config\n    if (this.$vux && this.$vux.config && this.$vux.config.$layout === 'VIEW_BOX') {\n      this.layout = 'VIEW_BOX'\n    }\n  },\n  mounted () {\n    this.$overflowScrollingList = document.querySelectorAll('.vux-fix-safari-overflow-scrolling')\n    this.$nextTick(() => {\n      const _this = this\n      this.popup = new Popup({\n        showMask: _this.showMask,\n        container: _this.$el,\n        hideOnBlur: _this.hideOnBlur,\n        onOpen () {\n          _this.fixSafariOverflowScrolling('auto')\n          _this.show = true\n        },\n        onClose () {\n          _this.show = false\n          if (window.__$vuxPopups && Object.keys(window.__$vuxPopups).length > 1) return\n          if (document.querySelector('.vux-popup-dialog.vux-popup-mask-disabled')) return\n          setTimeout(() => {\n            _this.fixSafariOverflowScrolling('touch')\n          }, 300)\n        }\n      })\n      if (this.value) {\n        this.popup.show()\n      }\n      this.initialShow = false\n    })\n  },\n  deactivated () {\n    if (this.hideOnDeactivated) {\n      this.show = false\n    }\n    this.removeModalClassName()\n  },\n  methods: {\n    /**\n    * https://github.com/airyland/vux/issues/311\n    * https://benfrain.com/z-index-stacking-contexts-experimental-css-and-ios-safari/\n    */\n    fixSafariOverflowScrolling (type) {\n      if (!this.$overflowScrollingList.length) return\n      // if (!/iphone/i.test(navigator.userAgent)) return\n      for (let i = 0; i < this.$overflowScrollingList.length; i++) {\n        this.$overflowScrollingList[i].style.webkitOverflowScrolling = type\n      }\n    },\n    removeModalClassName () {\n      this.layout === 'VIEW_BOX' && dom.removeClass(document.body, 'vux-modal-open')\n    },\n    doShow () {\n      this.popup && this.popup.show()\n      this.$emit('on-show')\n      this.fixSafariOverflowScrolling('auto')\n      this.layout === 'VIEW_BOX' && dom.addClass(document.body, 'vux-modal-open')\n      if (!this.hasFirstShow) {\n        this.$emit('on-first-show')\n        this.hasFirstShow = true\n      }\n    },\n    scrollTop () {\n      this.$nextTick(() => {\n        this.$el.scrollTop = 0\n        const box = this.$el.querySelectorAll('.vux-scrollable')\n        if (box.length) {\n          for (let i = 0; i < box.length; i++) {\n            box[i].scrollTop = 0\n          }\n        }\n      })\n    }\n  },\n  data () {\n    return {\n      layout: '',\n      initialShow: true,\n      hasFirstShow: false,\n      shouldRenderBody: true,\n      show: this.value\n    }\n  },\n  computed: {\n    styles () {\n      const styles = {}\n      if (!this.position || this.position === 'bottom' || this.position === 'top') {\n        styles.height = this.height\n      } else {\n        styles.width = this.width\n      }\n\n      if (this.maxHeight) {\n        styles['max-height'] = this.maxHeight\n      }\n\n      this.isTransparent && (styles['background'] = 'transparent')\n      if (this.popupStyle) {\n        for (let i in this.popupStyle) {\n          styles[i] = this.popupStyle[i]\n        }\n      }\n      return styles\n    }\n  },\n  watch: {\n    value (val) {\n      this.show = val\n    },\n    show (val) {\n      this.$emit('input', val)\n      if (val) {\n        // rerender body\n        if (this.shouldRerenderOnShow) {\n          this.shouldRenderBody = false\n          this.$nextTick(() => {\n            this.scrollTop()\n            this.shouldRenderBody = true\n            this.doShow()\n          })\n        } else {\n          if (this.shouldScrollTopOnShow) {\n            this.scrollTop()\n          }\n          this.doShow()\n        }\n      } else {\n        this.$emit('on-hide')\n        this.show = false\n        this.popup.hide(false)\n        setTimeout(() => {\n          if (!document.querySelector('.vux-popup-dialog.vux-popup-show')) {\n            this.fixSafariOverflowScrolling('touch')\n          }\n          this.removeModalClassName()\n        }, 200)\n      }\n    }\n  },\n  beforeDestroy () {\n    this.popup && this.popup.destroy()\n    this.fixSafariOverflowScrolling('touch')\n    this.removeModalClassName()\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"index.vue","sourceRoot":"node_modules/vux/src/components/popup","sourcesContent":["<template>\n  <transition\n    :name=\"`vux-popup-animate-${position}`\">\n    <div\n      v-show=\"show && !initialShow\"\n      :style=\"styles\"\n      class=\"vux-popup-dialog\"\n      :class=\"[`vux-popup-${position}`, show ? 'vux-popup-show' : '']\">\n        <slot v-if=\"shouldRenderBody\"></slot>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport Popup from './popup'\nimport dom from '../../libs/dom'\n\nexport default {\n  name: 'popup',\n  props: {\n    value: Boolean,\n    height: {\n      type: String,\n      default: 'auto'\n    },\n    width: {\n      type: String,\n      default: 'auto'\n    },\n    showMask: {\n      type: Boolean,\n      default: true\n    },\n    isTransparent: Boolean,\n    hideOnBlur: {\n      type: Boolean,\n      default: true\n    },\n    position: {\n      type: String,\n      default: 'bottom'\n    },\n    maxHeight: String,\n    popupStyle: Object,\n    hideOnDeactivated: {\n      type: Boolean,\n      default: true\n    },\n    shouldRerenderOnShow: {\n      type: Boolean,\n      default: false\n    },\n    shouldScrollTopOnShow: {\n      type: Boolean,\n      default: false\n    }\n  },\n  created () {\n    // get global layout config\n    if (this.$vux && this.$vux.config && this.$vux.config.$layout === 'VIEW_BOX') {\n      this.layout = 'VIEW_BOX'\n    }\n  },\n  mounted () {\n    this.$overflowScrollingList = document.querySelectorAll('.vux-fix-safari-overflow-scrolling')\n    this.$nextTick(() => {\n      const _this = this\n      this.popup = new Popup({\n        showMask: _this.showMask,\n        container: _this.$el,\n        hideOnBlur: _this.hideOnBlur,\n        onOpen () {\n          _this.fixSafariOverflowScrolling('auto')\n          _this.show = true\n        },\n        onClose () {\n          _this.show = false\n          if (window.__$vuxPopups && Object.keys(window.__$vuxPopups).length > 1) return\n          if (document.querySelector('.vux-popup-dialog.vux-popup-mask-disabled')) return\n          setTimeout(() => {\n            _this.fixSafariOverflowScrolling('touch')\n          }, 300)\n        }\n      })\n      if (this.value) {\n        this.popup.show()\n      }\n      this.initialShow = false\n    })\n  },\n  deactivated () {\n    if (this.hideOnDeactivated) {\n      this.show = false\n    }\n    this.removeModalClassName()\n  },\n  methods: {\n    /**\n    * https://github.com/airyland/vux/issues/311\n    * https://benfrain.com/z-index-stacking-contexts-experimental-css-and-ios-safari/\n    */\n    fixSafariOverflowScrolling (type) {\n      if (!this.$overflowScrollingList.length) return\n      // if (!/iphone/i.test(navigator.userAgent)) return\n      for (let i = 0; i < this.$overflowScrollingList.length; i++) {\n        this.$overflowScrollingList[i].style.webkitOverflowScrolling = type\n      }\n    },\n    removeModalClassName () {\n      this.layout === 'VIEW_BOX' && dom.removeClass(document.body, 'vux-modal-open')\n    },\n    doShow () {\n      this.popup && this.popup.show()\n      this.$emit('on-show')\n      this.fixSafariOverflowScrolling('auto')\n      this.layout === 'VIEW_BOX' && dom.addClass(document.body, 'vux-modal-open')\n      if (!this.hasFirstShow) {\n        this.$emit('on-first-show')\n        this.hasFirstShow = true\n      }\n    },\n    scrollTop () {\n      this.$nextTick(() => {\n        this.$el.scrollTop = 0\n        const box = this.$el.querySelectorAll('.vux-scrollable')\n        if (box.length) {\n          for (let i = 0; i < box.length; i++) {\n            box[i].scrollTop = 0\n          }\n        }\n      })\n    }\n  },\n  data () {\n    return {\n      layout: '',\n      initialShow: true,\n      hasFirstShow: false,\n      shouldRenderBody: true,\n      show: this.value\n    }\n  },\n  computed: {\n    styles () {\n      const styles = {}\n      if (!this.position || this.position === 'bottom' || this.position === 'top') {\n        styles.height = this.height\n      } else {\n        styles.width = this.width\n      }\n\n      if (this.maxHeight) {\n        styles['max-height'] = this.maxHeight\n      }\n\n      this.isTransparent && (styles['background'] = 'transparent')\n      if (this.popupStyle) {\n        for (let i in this.popupStyle) {\n          styles[i] = this.popupStyle[i]\n        }\n      }\n      return styles\n    }\n  },\n  watch: {\n    value (val) {\n      this.show = val\n    },\n    show (val) {\n      this.$emit('input', val)\n      if (val) {\n        // rerender body\n        if (this.shouldRerenderOnShow) {\n          this.shouldRenderBody = false\n          this.$nextTick(() => {\n            this.scrollTop()\n            this.shouldRenderBody = true\n            this.doShow()\n          })\n        } else {\n          if (this.shouldScrollTopOnShow) {\n            this.scrollTop()\n          }\n          this.doShow()\n        }\n      } else {\n        this.$emit('on-hide')\n        this.show = false\n        this.popup.hide(false)\n        setTimeout(() => {\n          if (!document.querySelector('.vux-popup-dialog.vux-popup-show')) {\n            this.fixSafariOverflowScrolling('touch')\n          }\n          this.removeModalClassName()\n        }, 200)\n      }\n    }\n  },\n  beforeDestroy () {\n    this.popup && this.popup.destroy()\n    this.fixSafariOverflowScrolling('touch')\n    this.removeModalClassName()\n  }\n}\n</script>\n\n<style lang=\"less\">\n@import '../../styles/variable.less';\n@import '../../styles/vux-modal.css';\n\n.vux-popup-dialog {\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background: @popup-background-color;\n  z-index: 501;\n  transition-property: transform;\n  transition-duration: 300ms;\n  max-height: 100%;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\n.vux-popup-dialog.vux-popup-left {\n  width: auto;\n  height: 100%;\n  top: 0;\n  right: auto;\n  bottom: auto;\n  left: 0;\n}\n.vux-popup-dialog.vux-popup-right {\n  width: auto;\n  height: 100%;\n  top: 0;\n  right: 0;\n  bottom: auto;\n  left: auto;\n}\n.vux-popup-dialog.vux-popup-top {\n  width: 100%;\n  top: 0;\n  right: auto;\n  bottom: auto;\n  left: 0;\n}\n.vux-popup-mask {\n  display: block;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  opacity: 0;\n  tap-highlight-color: rgba(0,0,0,0);\n  z-index: -1;\n  transition: opacity 400ms;\n}\n.vux-popup-mask.vux-popup-show {\n  opacity: 1;\n}\n\n.vux-popup-animate-bottom-enter, .vux-popup-animate-bottom-leave-active {\n  transform: translate3d(0, 100%, 0);\n}\n\n.vux-popup-animate-left-enter, .vux-popup-animate-left-leave-active {\n  transform: translate3d(-100%, 0, 0);\n}\n\n.vux-popup-animate-right-enter, .vux-popup-animate-right-leave-active {\n  transform: translate3d(100%, 0, 0);\n}\n\n.vux-popup-animate-top-enter, .vux-popup-animate-top-leave-active {\n  transform: translate3d(0, -100%, 0);\n}\n</style>\n"]}]}