{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/week-calendar/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/week-calendar/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Flexbox, FlexboxItem } from '../flexbox'\nimport { Swiper, SwiperItem } from '../swiper'\nimport dateFormat from '../../tools/date/format'\nimport calendarMarksMixin from '../../mixins/calendar-marks'\n\n/**\nimport { Flexbox, FlexboxItem, Swiper, SwiperItem, dateFormat } from 'vux'\n**/\n\nconst getNextIndex = (index) => {\n  if (index === 2) {\n    return 0\n  }\n  if (index === 0) {\n    return 1\n  }\n  return 2\n}\n\nconst getPrevIndex = index => {\n  if (index === 2) {\n    return 1\n  }\n  if (index === 1) {\n    return 0\n  }\n  if (index === 0) {\n    return 2\n  }\n}\n\nconst indexMap = {\n  0: 'last',\n  1: 'current',\n  2: 'next'\n}\n\nexport default {\n  mixins: [calendarMarksMixin],\n  components: {\n    Swiper,\n    SwiperItem,\n    Flexbox,\n    FlexboxItem\n  },\n  props: {\n    value: String,\n    height: {\n      type: String,\n      default: '65px'\n    },\n    marks: {\n      type: Array,\n      default () {\n        return []\n      }\n    }\n  },\n  created () {\n    [0, 7, -7].forEach(item => {\n      this.getThisWeekRange(item)\n    })\n  },\n  mounted () {\n    this.index = 1\n  },\n  watch: {\n    value (val) {\n      this.currentValue = val\n      this.changeData(null, this.index, val)\n    },\n    currentValue (val) {\n      this.$emit('input', val)\n      this.$emit('on-change', val)\n    },\n    currentMonth (val) {\n      const value = this.currentMonth.split('-')\n      const data = {\n        year: value[0],\n        month: value[1]\n      }\n      this.$emit('on-year-month-change', data)\n    }\n  },\n  data () {\n    return {\n      currentValue: this.value,\n      index: 0,\n      lastWeekList: [],\n      currentWeekList: [],\n      nextWeekList: [],\n      startDate: dateFormat(new Date(), 'YYYY-MM-DD'),\n      currentMonth: '',\n      changeCount: -1,\n      hasRender: false\n    }\n  },\n  methods: {\n    switchViewToCurrentValue () {\n      if (this.currentValue) {\n        this.changeData(null, this.index, this.currentValue)\n      }\n    },\n    switchViewToMonth (year, month) {\n      this.changeData(null, this.index, `${year}-${month}-01`)\n    },\n    switchViewToToday () {\n      const today = dateFormat(new Date(), 'YYYY-MM-DD')\n      this.changeData(null, this.index, today)\n    },\n    onClick (i) {\n      this.currentValue = i.format\n    },\n    onIndexChange (newIndex) {\n      let el = document.querySelector('#x000' + newIndex)\n      const start = el.getAttribute('data-start')\n      const date = new Date(start)\n      this.changeData(date, newIndex)\n    },\n    changeData (date, index, value) {\n      // if has value, reset start\n      if (value) {\n        const _date = new Date(value.replace(/-/g, '/'))\n        date = new Date(_date.setDate(_date.getDate() - _date.getDay()))\n        this[indexMap[index] + 'WeekList'] = this.getWeekRange(new Date(date.setDate(date.getDate())))\n      }\n\n      this.startDate = dateFormat(date, 'YYYY-MM-DD')\n\n      const lastMonth = dateFormat(date.getTime() + 6 * 24 * 3600 * 1000, 'YYYY-MM')\n      this.currentMonth = lastMonth\n\n      const nextIndex = getNextIndex(index)\n      const nextKey = indexMap[nextIndex]\n      this[nextKey + 'WeekList'] = this.getWeekRange(new Date(date.setDate(date.getDate() + 7)))\n      const lastIndex = getPrevIndex(index)\n      const lastKey = indexMap[lastIndex]\n      this[lastKey + 'WeekList'] = this.getWeekRange(new Date(date.setDate(date.getDate() - 14)))\n\n      this.$nextTick(() => {\n        this.changeCount++\n        this.$emit('on-view-change', {\n          allDates: this[indexMap[this.index] + 'WeekList']\n        }, this.changeCount)\n      })\n    },\n    getCurrentDates () {\n      return this[indexMap[this.index] + 'WeekList']\n    },\n    getCurrentYearMonth () {\n      const value = this.currentMonth.split('-')\n      return {\n        year: value[0],\n        month: value[1]\n      }\n    },\n    isToday (date) {\n      return dateFormat(date, 'YYYY-MM-DD') === dateFormat(new Date(), 'YYYY-MM-DD')\n    },\n    isSelected (date) {\n      return dateFormat(date, 'YYYY-MM-DD') === this.date\n    },\n    isWeekend (date) {\n      return date.getDay() === 0 || date.getDay() === 6\n    },\n    getWeekRange (start) {\n      let rs = [{\n        format: dateFormat(start, 'YYYY-MM-DD'),\n        formatedDate: dateFormat(start, 'YYYY-MM-DD'),\n        date: start,\n        str: dateFormat(start, 'D'),\n        isWeekend: this.isWeekend(start),\n        isToday: this.isWeekend(start),\n        isSelected: this.isSelected(start),\n        _date: start.getDate()\n      }]\n      for (let i = 1; i < 7; i++) {\n        let current = start\n        current.setDate(current.getDate() + 1)\n        rs.push({\n          format: dateFormat(current, 'YYYY-MM-DD'),\n          date: current,\n          str: dateFormat(current, 'D'),\n          formatedDate: dateFormat(current, 'YYYY-MM-DD'),\n          isWeekend: this.isWeekend(current),\n          isToday: this.isToday(current),\n          isSelected: this.isSelected(current),\n          _date: current.getDate()\n        })\n      }\n      return rs\n    },\n    getThisWeekRange (day = 0, start) {\n      const now = start || new Date()\n      const firstday = new Date(now.setDate(now.getDate() - now.getDay() + day))\n      if (day === 0) {\n        this.currentWeekList = this.getWeekRange(firstday)\n      }\n      if (day === 7) {\n        this.nextWeekList = this.getWeekRange(firstday)\n      }\n      if (day === -7) {\n        this.lastWeekList = this.getWeekRange(firstday)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"index.vue","sourceRoot":"node_modules/vux/src/components/week-calendar","sourcesContent":["<template>\n  <div class=\"vux-week-calendar\">\n\n    <slot name=\"header\" :current-month=\"currentMonth\"></slot>\n\n    <swiper\n      class=\"vux-week-calendar\"\n      v-model=\"index\"\n      :show-dots=\"false\"\n      :height=\"height\"\n      @on-index-change=\"onIndexChange\"\n      loop>\n\n        <template v-for=\"(item, index) in [lastWeekList, currentWeekList, nextWeekList]\">\n\n          <swiper-item :data-start=\"item[0].format\" :id=\"`x000${index}`\">\n            \n            <slot :name=\"`header-day-list-${index}`\">\n              <flexbox :gutter=\"0\">\n                <flexbox-item\n                class=\"vux-week-calendar-day-item\"\n                v-for=\"(i, index) in ['日', '一', '二', '三', '四', '五', '六']\"\n                :key=\"index\">\n                {{ i }}</flexbox-item>\n              </flexbox>\n            </slot>\n\n            <flexbox :gutter=\"0\">\n              <flexbox-item\n              class=\"vux-week-calendar-date-item\"\n              @click.native=\"onClick(i)\"\n              :class=\"{\n                'is-weekend': i.isWeekend,\n                'vux-week-calendar-is-today': i.isToday,\n                'vux-week-calendar-is-selected': i.format === value\n              }\"\n              v-for=\"(i, itemIndex) in item\"\n              :key=\"itemIndex\"\n              :data-date=\"i.format\">\n                <div class=\"vux-week-calendar-each-day-box\">\n                  <slot\n                  :name=\"`each-item-${index}`\"\n                  :str=\"i.str\"\n                  :formatedDate=\"i.format\"\n                  :is-weekend=\"i.isWeekend\"\n                  :is-today=\"i.isToday\"\n                  :is-selected=\"i.format === value\"\n                  >\n                    <span class=\"vux-week-calendar-each-day\" :style=\"getMarkStyle(i)\">\n                    {{ i.str }}\n                      <span class=\"vux-week-calendar-top-tip\" v-if=\"isShowTopTip(i)\" :style=\"isShowTopTip(i, 'style')\">\n                        <span>{{ isShowTopTip(i, 'text') }}</span>\n                      </span>\n                    </span>\n                    <span class=\"vux-calendar-dot\" v-show=\"isShowBottomDot(i)\"></span>\n                  </slot>\n                </div>\n              </flexbox-item>\n            </flexbox>\n\n          </swiper-item>\n          \n        </template>\n        \n      </swiper>\n  </div>\n</template>\n\n<script>\nimport { Flexbox, FlexboxItem } from '../flexbox'\nimport { Swiper, SwiperItem } from '../swiper'\nimport dateFormat from '../../tools/date/format'\nimport calendarMarksMixin from '../../mixins/calendar-marks'\n\n/**\nimport { Flexbox, FlexboxItem, Swiper, SwiperItem, dateFormat } from 'vux'\n**/\n\nconst getNextIndex = (index) => {\n  if (index === 2) {\n    return 0\n  }\n  if (index === 0) {\n    return 1\n  }\n  return 2\n}\n\nconst getPrevIndex = index => {\n  if (index === 2) {\n    return 1\n  }\n  if (index === 1) {\n    return 0\n  }\n  if (index === 0) {\n    return 2\n  }\n}\n\nconst indexMap = {\n  0: 'last',\n  1: 'current',\n  2: 'next'\n}\n\nexport default {\n  mixins: [calendarMarksMixin],\n  components: {\n    Swiper,\n    SwiperItem,\n    Flexbox,\n    FlexboxItem\n  },\n  props: {\n    value: String,\n    height: {\n      type: String,\n      default: '65px'\n    },\n    marks: {\n      type: Array,\n      default () {\n        return []\n      }\n    }\n  },\n  created () {\n    [0, 7, -7].forEach(item => {\n      this.getThisWeekRange(item)\n    })\n  },\n  mounted () {\n    this.index = 1\n  },\n  watch: {\n    value (val) {\n      this.currentValue = val\n      this.changeData(null, this.index, val)\n    },\n    currentValue (val) {\n      this.$emit('input', val)\n      this.$emit('on-change', val)\n    },\n    currentMonth (val) {\n      const value = this.currentMonth.split('-')\n      const data = {\n        year: value[0],\n        month: value[1]\n      }\n      this.$emit('on-year-month-change', data)\n    }\n  },\n  data () {\n    return {\n      currentValue: this.value,\n      index: 0,\n      lastWeekList: [],\n      currentWeekList: [],\n      nextWeekList: [],\n      startDate: dateFormat(new Date(), 'YYYY-MM-DD'),\n      currentMonth: '',\n      changeCount: -1,\n      hasRender: false\n    }\n  },\n  methods: {\n    switchViewToCurrentValue () {\n      if (this.currentValue) {\n        this.changeData(null, this.index, this.currentValue)\n      }\n    },\n    switchViewToMonth (year, month) {\n      this.changeData(null, this.index, `${year}-${month}-01`)\n    },\n    switchViewToToday () {\n      const today = dateFormat(new Date(), 'YYYY-MM-DD')\n      this.changeData(null, this.index, today)\n    },\n    onClick (i) {\n      this.currentValue = i.format\n    },\n    onIndexChange (newIndex) {\n      let el = document.querySelector('#x000' + newIndex)\n      const start = el.getAttribute('data-start')\n      const date = new Date(start)\n      this.changeData(date, newIndex)\n    },\n    changeData (date, index, value) {\n      // if has value, reset start\n      if (value) {\n        const _date = new Date(value.replace(/-/g, '/'))\n        date = new Date(_date.setDate(_date.getDate() - _date.getDay()))\n        this[indexMap[index] + 'WeekList'] = this.getWeekRange(new Date(date.setDate(date.getDate())))\n      }\n\n      this.startDate = dateFormat(date, 'YYYY-MM-DD')\n\n      const lastMonth = dateFormat(date.getTime() + 6 * 24 * 3600 * 1000, 'YYYY-MM')\n      this.currentMonth = lastMonth\n\n      const nextIndex = getNextIndex(index)\n      const nextKey = indexMap[nextIndex]\n      this[nextKey + 'WeekList'] = this.getWeekRange(new Date(date.setDate(date.getDate() + 7)))\n      const lastIndex = getPrevIndex(index)\n      const lastKey = indexMap[lastIndex]\n      this[lastKey + 'WeekList'] = this.getWeekRange(new Date(date.setDate(date.getDate() - 14)))\n\n      this.$nextTick(() => {\n        this.changeCount++\n        this.$emit('on-view-change', {\n          allDates: this[indexMap[this.index] + 'WeekList']\n        }, this.changeCount)\n      })\n    },\n    getCurrentDates () {\n      return this[indexMap[this.index] + 'WeekList']\n    },\n    getCurrentYearMonth () {\n      const value = this.currentMonth.split('-')\n      return {\n        year: value[0],\n        month: value[1]\n      }\n    },\n    isToday (date) {\n      return dateFormat(date, 'YYYY-MM-DD') === dateFormat(new Date(), 'YYYY-MM-DD')\n    },\n    isSelected (date) {\n      return dateFormat(date, 'YYYY-MM-DD') === this.date\n    },\n    isWeekend (date) {\n      return date.getDay() === 0 || date.getDay() === 6\n    },\n    getWeekRange (start) {\n      let rs = [{\n        format: dateFormat(start, 'YYYY-MM-DD'),\n        formatedDate: dateFormat(start, 'YYYY-MM-DD'),\n        date: start,\n        str: dateFormat(start, 'D'),\n        isWeekend: this.isWeekend(start),\n        isToday: this.isWeekend(start),\n        isSelected: this.isSelected(start),\n        _date: start.getDate()\n      }]\n      for (let i = 1; i < 7; i++) {\n        let current = start\n        current.setDate(current.getDate() + 1)\n        rs.push({\n          format: dateFormat(current, 'YYYY-MM-DD'),\n          date: current,\n          str: dateFormat(current, 'D'),\n          formatedDate: dateFormat(current, 'YYYY-MM-DD'),\n          isWeekend: this.isWeekend(current),\n          isToday: this.isToday(current),\n          isSelected: this.isSelected(current),\n          _date: current.getDate()\n        })\n      }\n      return rs\n    },\n    getThisWeekRange (day = 0, start) {\n      const now = start || new Date()\n      const firstday = new Date(now.setDate(now.getDate() - now.getDay() + day))\n      if (day === 0) {\n        this.currentWeekList = this.getWeekRange(firstday)\n      }\n      if (day === 7) {\n        this.nextWeekList = this.getWeekRange(firstday)\n      }\n      if (day === -7) {\n        this.lastWeekList = this.getWeekRange(firstday)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n@import '../../styles/variable.less';\n\n.vux-week-calendar {\n  background-color: @week-calendar-bg;\n}\n.vux-week-calendar-day-item, .vux-week-calendar-date-item {\n  text-align: center;\n}\n.vux-week-calendar-day-item {\n  color: @week-calendar-header-day-item-color;\n}\n.vux-week-calendar-each-day-box {\n  padding: 5px 0;\n}\n.vux-week-calendar-each-day-box {\n  position: relative;\n}\n.vux-week-calendar-each-day {\n  position: relative;\n  background-color: transparent;\n  border: 1px solid transparent;\n  display: inline-block;\n  font-size: 16px;\n  color: @week-calendar-each-date-item-color;\n  width: @week-calendar-each-date-item-size;\n  height: @week-calendar-each-date-item-size;\n  line-height: @week-calendar-each-date-item-line-height;\n  text-align: center;\n  border-radius: 50%;\n  box-sizing: border-box;\n}\n.vux-week-calendar-is-selected .vux-week-calendar-each-day {\n  background-color: @week-calendar-selected-item-bg-color;\n  color: @week-calendar-selected-item-text-color;\n}\n.vux-calendar-dot {\n  display: block;\n  text-align: center;\n  width: 5px;\n  height: 5px;\n  position: absolute;\n  left: 50%;\n  bottom: 0px;\n  margin-left: -2.5px;\n  background-color: @week-calendar-dot-color;\n  border-radius: 50%;\n}\n.vux-week-calendar-top-tip {\n  position: absolute;\n  left: -10px;\n  top: 0;\n  font-size: 20px;\n  transform: scale(0.5);\n  transform-origin: top left;\n}\n</style>\n"]}]}