{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/checklist/index.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/checklist/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/less-loader/dist/cjs.js","mtime":1592111419098},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import '../../styles/weui/widget/weui_cell/weui_cell_global';\n@import '../../styles/weui/widget/weui_cell/weui_check';\n@import '../../styles/weui/icon/weui_icon_font';\n\n.weui-cells_checkbox .weui-check:checked + .vux-checklist-icon-checked:before {\n  color: @checklist-icon-active-color;\n}\n\n.weui-cells_checkbox > label > * {\n  pointer-events: none;\n}\n.vux-checklist-disabled .vux-checklist-icon-checked:before {\n  opacity: 0.5;\n}\n.vux-checklist-label-left {\n  flex-direction: row-reverse;\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyOA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/checklist","sourcesContent":["<template>\n  <div :class=\"disabled ? 'vux-checklist-disabled' : ''\">\n    <div\n      v-show=\"title\"\n      class=\"weui-cells__title\">{{ title }}</div>\n    <slot name=\"after-title\"></slot>\n    <div class=\"weui-cells weui-cells_checkbox\">\n      <label\n        class=\"weui-cell weui-check_label\"\n        :class=\"{\n          'vux-checklist-label-left': labelPosition === 'left'\n        }\"\n        :for=\"`checkbox_${uuid}_${index}`\"\n        v-for=\"(one, index) in currentOptions\">\n        <div class=\"weui-cell__hd\">\n          <input type=\"checkbox\"\n            class=\"weui-check\"\n            :name=\"`vux-checkbox-${uuid}`\"\n            :value=\"getKey(one)\"\n            v-model=\"currentValue\"\n            :id=\"disabled ? '' : `checkbox_${uuid}_${index}`\"\n            :disabled=\"isDisabled(getKey(one))\">\n          <i class=\"weui-icon-checked vux-checklist-icon-checked\"></i>\n        </div>\n        <div class=\"weui-cell__bd\">\n          <p v-html=\"getValue(one)\"></p>\n          <inline-desc v-if=\"getInlineDesc(one)\">{{ getInlineDesc(one) }}</inline-desc>\n        </div>\n      </label>\n    </div>\n    <slot name=\"footer\"></slot>\n  </div>\n</template>\n\n<script>\nimport Base from '../../libs/base'\nimport Tip from '../tip'\nimport Icon from '../icon'\nimport InlineDesc from '../inline-desc'\nimport { getValue, getLabels, getKey, getInlineDesc } from './object-filter'\nimport shuffle from 'array-shuffle'\n\nexport default {\n  name: 'checklist',\n  components: {\n    Tip,\n    Icon,\n    InlineDesc\n  },\n  filters: {\n    getValue,\n    getKey\n  },\n  mixins: [Base],\n  props: {\n    name: String,\n    showError: Boolean,\n    title: String,\n    required: {\n      type: Boolean,\n      default: false\n    },\n    options: {\n      type: Array,\n      required: true\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    max: Number,\n    min: Number,\n    fillMode: Boolean,\n    randomOrder: Boolean,\n    checkDisabled: {\n      type: Boolean,\n      default: true\n    },\n    labelPosition: {\n      type: String,\n      default: 'right'\n    },\n    disabled: Boolean\n  },\n  data () {\n    return {\n      currentValue: [],\n      currentOptions: this.options,\n      tempValue: '' // used only for radio mode\n    }\n  },\n  beforeUpdate () {\n    if (this.isRadio) {\n      const length = this.currentValue.length\n      if (length > 1) {\n        this.currentValue = [this.currentValue[length - 1]]\n      }\n      const val = pure(this.currentValue)\n      this.tempValue = val.length ? val[0] : ''\n    }\n  },\n  created () {\n    this.handleChangeEvent = true\n    if (this.value) {\n      this.currentValue = this.value\n      if (this.isRadio) {\n        this.tempValue = this.isRadio ? this.value[0] : this.value\n      }\n    }\n    if (this.randomOrder) {\n      this.currentOptions = shuffle(this.options)\n    } else {\n      this.currentOptions = this.options\n    }\n  },\n  methods: {\n    getValue,\n    getKey,\n    getInlineDesc,\n    getFullValue () {\n      const labels = getLabels(this.options, this.value)\n      return this.currentValue.map((one, index) => {\n        return {\n          value: one,\n          label: labels[index]\n        }\n      })\n    },\n    isDisabled (key) {\n      if (!this.checkDisabled) {\n        return false\n      }\n      if (this._max > 1) {\n        return this.currentValue.indexOf(key) === -1 && this.currentValue.length === this._max\n      }\n      return false\n    }\n  },\n  computed: {\n    isRadio () {\n      if (typeof this.max === 'undefined') {\n        return false\n      } else {\n        return this.max === 1\n      }\n    },\n    _total () {\n      return this.fillMode ? (this.options.length + 1) : this.options.length\n    },\n    _min () {\n      if (!this.required && !this.min) {\n        return 0\n      }\n      if (!this.required && this.min) {\n        return Math.min(this._total, this.min)\n      }\n      if (this.required) {\n        if (this.min) {\n          let max = Math.max(1, this.min)\n          return Math.min(this._total, max)\n        } else {\n          return 1\n        }\n      }\n    },\n    _max () {\n      if (!this.required && !this.max) {\n        return this._total\n      }\n      if (this.max) {\n        if (this.max > this._total) {\n          return this._total\n        }\n        return this.max\n      } else {\n        return this._total\n      }\n    },\n    valid () {\n      return this.currentValue.length >= this._min && this.currentValue.length <= this._max\n    }\n  },\n  watch: {\n    tempValue (val) {\n      const _val = val ? [val] : []\n      this.$emit('input', _val)\n      this.$emit('on-change', _val, getLabels(this.options, _val))\n    },\n    value (newVal) {\n      if (JSON.stringify(newVal) !== JSON.stringify(this.currentValue)) {\n        this.currentValue = newVal\n      }\n    },\n    options (val) {\n      this.currentOptions = val\n    },\n    currentValue (newVal) {\n      const val = pure(newVal)\n\n      if (!this.isRadio) {\n        this.$emit('input', val)\n        this.$emit('on-change', val, getLabels(this.options, val))\n        let err = {}\n        if (this._min) {\n          if (this.required) {\n            if (this.currentValue.length < this._min) {\n              err = {\n                min: this._min\n              }\n            }\n          } else {\n            if (this.currentValue.length && this.currentValue.length < this._min) {\n              err = {\n                min: this._min\n              }\n            }\n          }\n        }\n        if (!this.valid && this.dirty && Object.keys(err).length) {\n          this.$emit('on-error', err)\n        } else {\n          this.$emit('on-clear-error')\n        }\n      }\n    }\n  }\n}\nfunction pure (obj) {\n  return JSON.parse(JSON.stringify(obj))\n}\n</script>\n\n<style lang=\"less\">\n@import '../../styles/weui/widget/weui_cell/weui_cell_global';\n@import '../../styles/weui/widget/weui_cell/weui_check';\n@import '../../styles/weui/icon/weui_icon_font';\n\n.weui-cells_checkbox .weui-check:checked + .vux-checklist-icon-checked:before {\n  color: @checklist-icon-active-color;\n}\n\n.weui-cells_checkbox > label > * {\n  pointer-events: none;\n}\n.vux-checklist-disabled .vux-checklist-icon-checked:before {\n  opacity: 0.5;\n}\n.vux-checklist-label-left {\n  flex-direction: row-reverse;\n}\n</style>\n"]}]}