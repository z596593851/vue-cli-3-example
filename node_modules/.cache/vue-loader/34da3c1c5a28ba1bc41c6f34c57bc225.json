{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/v-chart/v-chart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/v-chart/v-chart.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.noselect {\n  -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome and Opera */\n}\n",{"version":3,"sources":["v-chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"v-chart.vue","sourceRoot":"node_modules/vux/src/components/v-chart","sourcesContent":["<template lang=\"html\">\n  <div\n    :style=\"{\n      backgroundColor: backgroundColor,\n      width: width + 'px',\n      height: height + 'px'\n    }\"\n    @touchstart=\"onTouchstart\">\n    <canvas height=\"260\" class=\"noselect\" ref=\"chart\"></canvas>\n    <slot></slot>\n  </div>\n</template>\n\n<script>\n\n// const shapeMap = {\n//   point: ['circle', 'hollowCircle', 'rect'],\n//   line: ['line', 'smooth', 'dash'],\n//   area: ['area', 'smooth'],\n//   interval: ['rect'],\n//   polygon: ['polygon'],\n//   schema: ['candle']\n// }\n\nimport F2 from '@antv/f2'\n\nexport default {\n  props: {\n    width: Number,\n    height: Number,\n    backgroundColor: {\n      type: String,\n      default: '#fff'\n    },\n    data: {\n      type: Array\n    },\n    tooltip: {\n      type: Object\n    },\n    shape: {\n      type: String,\n      default: 'line'\n    },\n    preventRender: {\n      type: Boolean,\n      default: false\n    },\n    preventDefault: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      xField: '',\n      yField: '',\n      hasPoint: false,\n      pointStyle: {},\n\n      guideTags: [],\n\n      areaOptions: null,\n      lineOptions: null,\n      tooltipOptions: null,\n      legendOptions: null,\n\n      barOptions: null,\n\n      pieOptions: null,\n\n      guideOptions: null,\n\n      pointOptions: null,\n\n      xFieldOptions: {},\n      yFieldOptions: {},\n\n      guides: [],\n\n      seriesField: '',\n\n      xAxisOptions: null,\n      yAxisOptions: null,\n\n      autoAlignXAxis: undefined\n    }\n  },\n  computed: {\n    currentData () {\n      if (this.pieOptions) {\n        return this.data.slice().map(item => {\n          item.a = '1'\n          return item\n        })\n      }\n      return this.data\n    },\n    currentXFieldOptions (val) {\n      const defaultOptions = {\n        tickCount: 5\n      }\n      if (!this.barOptions) {\n        defaultOptions.range = [0, 1]\n      } else {\n        defaultOptions.tickCount = 0\n      }\n      // auto detect if is timeCat\n      if (!this.xFieldOptions) {\n        if (/\\d{4}-\\d{2}-\\d{2}/.test(this.data[0][this.xField])) {\n          return Object.assign({}, defaultOptions, {\n            type: 'timeCat',\n            tickCount: 3\n          })\n        } else {\n          return defaultOptions\n        }\n      }\n\n      return Object.assign({}, defaultOptions, this.xFieldOptions)\n    },\n    currentYFieldOptions (val) {\n      const defaultOptions = {\n        tickCount: 5\n      }\n      if (!val) {\n        return defaultOptions\n      }\n\n      return Object.assign({}, defaultOptions, this.yFieldOptions)\n    }\n  },\n  watch: {\n    data () {\n      this.changeData(this.data)\n    }\n  },\n  methods: {\n    onTouchstart (e) {\n      this.preventDefault && e.preventDefault()\n    },\n    set (name, options) {\n      this[`${name}Options`] = options\n    },\n    changeData (data) {\n      this.chart && this.chart.changeData(data)\n    },\n    setField (axis, item) {\n      this[`${axis}Field`] = item\n    },\n    repaint () {\n      this.chart.repaint()\n    },\n    rerender () {\n      this.destroy()\n      this.render()\n    },\n    destroy () {\n      this.chart && this.chart.destroy()\n    },\n    addGuide (options) {\n      this.guides.push(options)\n    },\n    setScale (options) {\n      if (options.x) {\n        this.xFieldOptions = options.x\n      }\n      if (options.y) {\n        this.yFieldOptions = options.y\n      }\n    },\n    setAxis (options) {\n      if (options.x) {\n        this.xAxisOptions = options\n        if (typeof options.autoAlign !== 'undefined') {\n          this.autoAlignXAxis = options.autoAlign\n        }\n      }\n      if (options.y) {\n        this.yAxisOptions = options\n      }\n    },\n    buildColor (c) {\n      let color = c || ''\n      if (Array.isArray(c) && Array.isArray(c[0])) {\n        const ctx = this.$refs.chart.getContext('2d')\n        color = ctx.createLinearGradient(0, 0, window.innerWidth, 0)\n        c.forEach(c => {\n          color.addColorStop(c[0], c[1])\n        })\n      }\n      return color\n    },\n    setPie (options = {}) {\n      this.pieOptions = options\n    },\n    setBar (options = {}) {\n      this.barOptions = options\n    },\n    setLegend (options) {\n      this.legendOptions = options\n    },\n    setTooltip (options) {\n      this.tooltipOptions = options\n    },\n    setArea (options) {\n      this.areaOptions = options\n    },\n    setGuide (options) {\n      this.guideOptions = options\n    },\n    setLine (options) {\n      this.lineOptions = options\n    },\n    setPoint (options) {\n      this.pointOptions = options\n    },\n    buildPosition () {\n      return `${this.xField}*${this.yField}`\n    },\n    getFields () {\n      if (this.xField && this.yField) {\n        return\n      }\n\n      if (this.data && this.data.length) {\n        const keys = Object.keys(this.data[0])\n        if (keys.length >= 2) {\n          let indexes = [0, 1]\n          const type1 = typeof this.data[0][keys[0]]\n          const type2 = typeof this.data[0][keys[1]]\n          if (type1 === 'number' && type2 !== 'number') {\n            indexes = [1, 0]\n          } else if (type1 === 'string' && type2 === 'string' && keys[2] === 'value') {\n            indexes = [0, 2]\n          }\n          this.xField = keys[indexes[0]]\n          this.yField = keys[indexes[1]]\n        }\n      }\n    },\n    render () {\n      const _this = this\n      let autoAlignXAxis = this.autoAlignXAxis\n      if (this.barOptions) {\n        autoAlignXAxis = false\n      }\n      if (typeof autoAlignXAxis === 'undefined') {\n        autoAlignXAxis = true\n      }\n      const windowWidth = window.innerWidth\n      const windowHeight = window.innerHeight\n      const chart = new F2.Chart({\n        el: this.$refs.chart,\n        width: this.width || windowWidth,\n        height: this.height ? this.height : (windowWidth > windowHeight ? (windowHeight - 54) : windowWidth * 0.707),\n        pixelRatio: this.$devicePixelRatio || window.devicePixelRatio,\n        ...this.$attrs\n      })\n      if (this.preventRender) {\n        this.$emit('on-render', { chart })\n        return\n      }\n\n      if (!this.data || !this.data.length) {\n        return\n      }\n\n      this.getFields()\n\n      chart.source(this.currentData)\n\n      chart.scale(this.xField, this.currentXFieldOptions)\n      chart.scale(this.yField, this.currentYFieldOptions)\n\n      if (this.legendOptions) {\n        if (this.legendOptions.disabled) {\n          chart.legend(false)\n        } else {\n          chart.legend(this.legendOptions)\n        }\n      }\n\n      if (this.tooltipOptions) {\n        if (this.barOptions) {\n          this.tooltipOptions.showCrosshairs = false\n        }\n        if (!this.tooltipOptions.disabled) {\n          // handle show-value-in-legend\n          if (this.tooltipOptions.showValueInLegend) {\n            const customTooltip = {\n              custom: true, // 自定义 tooltip 内容框\n              onChange: function (obj) {\n                const legend = _this.chart.get('legendController').legends.top[0]\n                const tooltipItems = obj.items\n                const legendItems = legend.items\n                const map = {}\n                legendItems.map(item => {\n                  map[item.name] = JSON.parse(JSON.stringify(item))\n                })\n                tooltipItems.map(item => {\n                  const { name, value } = item\n                  if (map[name]) {\n                    map[name].value = value\n                  }\n                })\n                legend.setItems(Object.values(map))\n              },\n              onHide: function () {\n                const VChart = _this.chart\n                const legend = VChart.get('legendController').legends.top[0]\n                legend.setItems(VChart.getLegendItems().type)\n              }\n            }\n            this.tooltipOptions = {\n              ...this.tooltipOptions,\n              ...customTooltip\n            }\n          }\n          chart.tooltip(this.tooltipOptions)\n        } else {\n          chart.tooltip(false)\n        }\n      } else {\n        chart.tooltip({\n          showCrosshairs: !this.barOption\n        })\n      }\n\n      if (autoAlignXAxis) {\n        chart.axis(this.xField, {\n          label (text, index, total) {\n            const textCfg = {}\n            if (index === 0) {\n              textCfg.textAlign = 'left'\n            }\n            if (index === total - 1) {\n              textCfg.textAlign = 'right'\n            }\n            return textCfg\n          }\n        })\n      }\n\n      if (this.lineOptions) {\n        const { shape, adjust, size } = this.lineOptions\n        let seriesField = this.lineOptions.seriesField || ''\n        let colors = this.buildColor(this.lineOptions.colors)\n        let rs = chart.line().position(this.buildPosition()).shape(shape)\n\n        if (size) {\n          rs.size(size)\n        }\n\n        if (!seriesField && colors) {\n          rs.color(colors)\n        }\n        if (seriesField) {\n          if (colors && colors.length) {\n            rs.color(seriesField, colors)\n          } else {\n            rs.color(seriesField)\n          }\n        }\n        if (adjust) {\n          rs.adjust(adjust)\n        }\n      }\n\n      if (this.guides.length) {\n        this.guides.forEach(guide => {\n          chart.guide()[guide.type](guide.options)\n        })\n      }\n\n      if (this.areaOptions) {\n        const { adjust, seriesField } = this.areaOptions\n        let color = this.buildColor(this.areaOptions.colors)\n        let rs = chart.area().position(this.buildPosition()).shape(this.areaOptions.shape || '')\n        if (!seriesField && color) {\n          rs.color(color)\n        } else {\n          rs.color(seriesField || '', color)\n        }\n\n        if (adjust) {\n          rs.adjust(adjust)\n        }\n      }\n\n      if (this.barOptions) {\n        const { adjust, seriesField } = this.barOptions\n        let color = this.buildColor(this.barOptions.colors)\n        let rs = chart.interval().position(this.buildPosition())\n        if (!seriesField && color) {\n          rs.color(color)\n        } else {\n          rs.color(seriesField || '', color)\n        }\n\n        if (adjust) {\n          rs.adjust(adjust)\n        }\n      }\n\n      ['x', 'y'].forEach(axis => {\n        if (this[`${axis}AxisOptions`]) {\n          chart.axis(this[`${axis}Field`], this[`${axis}Field`].disabled ? false : this[`${axis}AxisOptions`])\n        }\n      })\n\n      if (this.pieOptions) {\n        chart.coord(this.pieOptions.coord, this.pieOptions)\n        chart.axis(false)\n        chart.interval()\n        .position('a*percent')\n        .color(this.pieOptions.seriesField, (this.pieOptions.colors && this.pieOptions.colors.length) ? this.pieOptions.colors : '')\n        .adjust('stack')\n        .style({\n          lineWidth: 1,\n          stroke: '#fff',\n          lineJoin: 'round',\n          lineCap: 'round'\n        })\n        .animate({\n          appear: {\n            duration: 1200,\n            easing: 'bounceOut'\n          }\n        })\n      }\n\n      if (this.pointOptions) {\n        const { seriesField, styles, shape, size, colors } = this.pointOptions\n        let rs = chart.point().position(this.buildPosition()).style(styles).shape(shape)\n\n        let color = this.buildColor(colors)\n        if (!seriesField && color) {\n          rs.color(color)\n        } else {\n          rs.color(seriesField || '', color)\n        }\n\n        if (!seriesField && size) {\n          rs.size(size)\n        } else {\n          rs.size(seriesField || '', size)\n        }\n      }\n\n      // 在渲染前执触发on-render使之可以做自定义设置\n      this.$emit('on-render', { chart })\n      chart.render()\n      this.chart = chart\n    }\n  },\n  async mounted () {\n    await this.$nextTick()\n    this.render()\n    window.addEventListener('resize', this.render)\n  },\n  beforeDestroy () {\n    window.removeEventListener('resize', this.render)\n    this.destroy()\n  }\n}\n</script>\n\n<style lang=\"css\">\n.noselect {\n  -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome and Opera */\n}\n</style>\n"]}]}