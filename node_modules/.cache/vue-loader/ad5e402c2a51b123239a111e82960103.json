{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/picker/index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/picker/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import './scroller.css';\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsPA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/picker","sourcesContent":["<template>\n  <div class=\"vux-picker\">\n    <flexbox :gutter=\"0\">\n      <flexbox-item :span=\"columnWidth && columnWidth[index]\" v-for=\"(one, index) in currentData\" :key=\"index\" style=\"margin-left:0;\">\n        <div class=\"vux-picker-item\" :id=\"`vux-picker-${uuid}-${index}`\"></div>\n      </flexbox-item>\n    </flexbox>\n  </div>\n</template>\n\n<script>\nimport Scroller from './scroller'\nimport { Flexbox, FlexboxItem } from '../flexbox'\nimport Manager from './chain'\nimport value2name from '../../filters/value2name'\nimport isArray from '../../libs/is-array'\n\nexport default {\n  name: 'picker',\n  components: {\n    Flexbox,\n    FlexboxItem\n  },\n  created () {\n    if (this.columns !== 0) {\n      const length = this.columns\n      this.store = new Manager(this.data, length, this.fixedColumns || this.columns)\n      this.currentData = this.store.getColumns(this.value)\n    }\n  },\n  mounted () {\n    this.uuid = Math.random().toString(36).substring(3, 8)\n    this.$nextTick(() => {\n      this.render(this.currentData, this.currentValue)\n    })\n  },\n  props: {\n    data: Array,\n    columns: {\n      type: Number,\n      default: 0\n    },\n    fixedColumns: {\n      type: Number,\n      default: 0\n    },\n    value: Array,\n    itemClass: {\n      type: String,\n      default: 'scroller-item'\n    },\n    columnWidth: Array\n  },\n  methods: {\n    getNameValues () {\n      return value2name(this.currentValue, this.data)\n    },\n    getId (i) {\n      return `#vux-picker-${this.uuid}-${i}`\n    },\n    render (data, value) {\n      this.count = this.currentData.length\n      const _this = this\n      if (!data || !data.length) {\n        return\n      }\n      let count = this.currentData.length\n      // set first item as value\n      if (value.length < count) {\n        for (let i = 0; i < count; i++) {\n          if (process.env.NODE_ENV === 'development' &&\n            typeof data[i][0] === 'undefined' &&\n            isArray(this.data) &&\n            this.data[0] &&\n            typeof this.data[0].value !== 'undefined' &&\n            !this.columns) {\n            console.error('[VUX error] 渲染出错，如果为联动模式，需要指定 columns(列数)')\n          }\n          this.$set(_this.currentValue, i, data[i][0].value || data[i][0])\n        }\n      }\n\n      for (let i = 0; i < data.length; i++) {\n        /**\n        * Still don't know why this happens\n        */\n        if (!document.querySelector(_this.getId(i))) {\n          return\n        }\n\n        _this.scroller[i] && _this.scroller[i].destroy()\n        _this.scroller[i] = new Scroller(_this.getId(i), {\n          data: data[i],\n          defaultValue: value[i] || data[i][0].value,\n          itemClass: _this.itemClass,\n          onSelect (value) {\n            _this.$set(_this.currentValue, i, value)\n            if (!this.columns || (this.columns && _this.getValue().length === _this.store.count)) {\n              _this.$nextTick(() => {\n                _this.$emit('on-change', _this.getValue())\n              })\n            }\n            if (_this.columns !== 0) {\n              _this.renderChain(i + 1)\n            }\n          }\n        })\n        if (_this.currentValue) {\n          _this.scroller[i].select(value[i])\n        }\n      }\n    },\n    renderChain (i) {\n      if (!this.columns) {\n        return\n      }\n\n      // do not render for last scroller\n      if (i > this.count - 1) {\n        return\n      }\n\n      const _this = this\n      let ID = this.getId(i)\n      // destroy old one\n      this.scroller[i].destroy()\n      let list = this.store.getChildren(_this.getValue()[i - 1])\n      this.scroller[i] = new Scroller(ID, {\n        data: list,\n        itemClass: _this.item_class,\n        onSelect (value) {\n          _this.$set(_this.currentValue, i, value)\n          _this.$nextTick(() => {\n            _this.$emit('on-change', _this.getValue())\n          })\n          _this.renderChain(i + 1)\n        }\n      })\n      // list is Array(empty) as maybe\n      if (list.length) {\n        this.$set(this.currentValue, i, list[0].value)\n        this.renderChain(i + 1)\n      } else {\n        this.$set(this.currentValue, i, null)\n      }\n    },\n    getValue () {\n      let data = []\n      for (let i = 0; i < this.currentData.length; i++) {\n        if (this.scroller[i]) {\n          data.push(this.scroller[i].value)\n        } else {\n          return []\n        }\n      }\n      return data\n    },\n    emitValueChange (val) {\n      if (!this.columns || (this.columns && val.length === this.store.count)) {\n        this.$emit('on-change', val)\n      }\n    }\n  },\n  data () {\n    return {\n      scroller: [],\n      count: 0,\n      uuid: '',\n      currentData: this.data,\n      currentValue: this.value\n    }\n  },\n  watch: {\n    value (val) {\n      if (JSON.stringify(val) !== JSON.stringify(this.currentValue)) {\n        this.currentValue = val\n      }\n    },\n    currentValue (val, oldVal) {\n      this.$emit('input', val)\n      // render all the scroller for chain datas\n      if (this.columns !== 0) {\n        if (val.length > 0) {\n          if (JSON.stringify(val) !== JSON.stringify(oldVal)) {\n            this.currentData = this.store.getColumns(val)\n            this.$nextTick(function () {\n              this.render(this.currentData, val)\n            })\n          }\n        } else {\n          this.render(this.currentData, [])\n        }\n      } else {\n        if (val.length) {\n          for (let i = 0; i < val.length; i++) {\n            if (this.scroller[i] && this.scroller[i].value !== val[i]) {\n              this.scroller[i].select(val[i])\n            }\n          }\n        } else {\n          this.render(this.currentData, [])\n        }\n      }\n    },\n    data (val) {\n      if (JSON.stringify(val) !== JSON.stringify(this.currentData)) {\n        this.currentData = val\n      }\n    },\n    currentData (newData) {\n      if (Object.prototype.toString.call(newData[0]) === '[object Array]') {\n        this.$nextTick(() => {\n          this.render(newData, this.currentValue)\n          // emit on-change after rerender\n          this.$nextTick(() => {\n            this.emitValueChange(this.getValue())\n\n            if (JSON.stringify(this.getValue()) !== JSON.stringify(this.currentValue)) {\n              if (!this.columns || (this.columns && this.getValue().length === this.store.count)) {\n                this.currentValue = this.getValue()\n              }\n            }\n          })\n        })\n      } else {\n        if (this.columns !== 0) {\n          if (!newData.length) {\n            return\n          }\n          const length = this.columns\n          this.store = new Manager(newData, length, this.fixedColumns || this.columns)\n          this.currentData = this.store.getColumns(this.currentValue)\n        }\n      }\n    }\n  },\n  beforeDestroy () {\n    for (let i = 0; i < this.count; i++) {\n      this.scroller[i] && this.scroller[i].destroy()\n      this.scroller[i] = null\n    }\n  }\n}\n</script>\n\n<style>\n@import './scroller.css';\n</style>\n\n"]}]}