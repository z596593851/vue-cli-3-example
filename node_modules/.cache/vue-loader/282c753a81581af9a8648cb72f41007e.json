{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/x-input/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/x-input/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Base from '../../libs/base'\nimport Icon from '../icon'\nimport Toast from '../toast'\nimport InlineDesc from '../inline-desc'\n\nimport isEmail from 'validator/lib/isEmail'\nimport isMobilePhone from 'validator/lib/isMobilePhone'\n\nimport Debounce from '../../tools/debounce'\n\nimport mask from 'vanilla-masker'\n\nconst validators = {\n  'email': {\n    fn: isEmail,\n    msg: '邮箱格式'\n  },\n  'china-mobile': {\n    fn (str) {\n      return isMobilePhone(str, 'zh-CN')\n    },\n    msg: '手机号码'\n  },\n  'china-name': {\n    fn (str) {\n      return str.length >= 2 && str.length <= 6\n    },\n    msg: '中文姓名'\n  }\n}\nexport default {\n  name: 'x-input',\n  created () {\n    this.currentValue = (this.value === undefined || this.value === null) ? '' : (this.mask ? this.maskValue(this.value) : this.value)\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV === 'development') {\n      if (!this.title && !this.placeholder && !this.currentValue) {\n        console.warn('no title and no placeholder?')\n      }\n    }\n\n    if (this.required && (typeof this.currentValue === 'undefined' || this.currentValue === '')) {\n      this.valid = false\n    }\n    this.handleChangeEvent = true\n    if (this.debounce) {\n      this._debounce = Debounce(() => {\n        this.$emit('on-change', this.currentValue)\n      }, this.debounce)\n    }\n  },\n  beforeMount () {\n    if (this.$slots && this.$slots['restricted-label']) {\n      this.hasRestrictedLabel = true\n    }\n    if (this.$slots && this.$slots['right-full-height']) {\n      this.hasRightFullHeightSlot = true\n    }\n  },\n  beforeDestroy () {\n    if (this._debounce) {\n      this._debounce.cancel()\n    }\n    window.removeEventListener('resize', this.scrollIntoView)\n  },\n  mixins: [Base],\n  components: {\n    Icon,\n    InlineDesc,\n    Toast\n  },\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    placeholder: String,\n    value: [String, Number],\n    name: String,\n    readonly: Boolean,\n    disabled: Boolean,\n    keyboard: String,\n    inlineDesc: String,\n    isType: [String, Function],\n    min: Number,\n    max: Number,\n    showClear: {\n      type: Boolean,\n      default: true\n    },\n    equalWith: String,\n    textAlign: String,\n    // https://github.com/yisibl/blog/issues/3\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    autocapitalize: {\n      type: String,\n      default: 'off'\n    },\n    autocorrect: {\n      type: String,\n      default: 'off'\n    },\n    spellcheck: {\n      type: String,\n      default: 'false'\n    },\n    novalidate: {\n      type: Boolean,\n      default: false\n    },\n    iconType: String,\n    debounce: Number,\n    placeholderAlign: String,\n    labelWidth: String,\n    mask: String,\n    shouldToastError: {\n      type: Boolean,\n      default: true\n    }\n  },\n  computed: {\n    labelStyles () {\n      const {$parent = {}} = this\n      return {\n        width: this.labelWidthComputed || $parent.labelWidth || this.labelWidthComputed,\n        textAlign: $parent.labelAlign,\n        marginRight: $parent.labelMarginRight\n      }\n    },\n    labelClass () {\n      return {\n        'vux-cell-justify': this.$parent && (this.$parent.labelAlign === 'justify' || this.$parent.$parent.labelAlign === 'justify')\n      }\n    },\n    pattern () {\n      if (this.keyboard === 'number' || this.isType === 'china-mobile') {\n        return '[0-9]*'\n      }\n    },\n    labelWidthComputed () {\n      const width = this.title.replace(/[^x00-xff]/g, '00').length / 2 + 1\n      if (width < 10) {\n        return width + 'em'\n      }\n    },\n    hasErrors () {\n      return Object.keys(this.errors).length > 0\n    },\n    inputStyle () {\n      if (this.textAlign) {\n        return {\n          textAlign: this.textAlign\n        }\n      }\n    },\n    showWarn () {\n      return !this.novalidate && !this.equalWith && !this.valid && this.firstError && (this.touched || this.forceShowError)\n    }\n  },\n  mounted () {\n    window.addEventListener('resize', this.scrollIntoView)\n  },\n  methods: {\n    scrollIntoView (time = 0) {\n      // alert('scroll into view')\n      if (/iphone/i.test(navigator.userAgent)) {\n        // return\n      }\n      if (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA') {\n        // alert('will scroll')\n        setTimeout(() => {\n          // alert(this.$refs.input.length)\n          this.$refs.input.scrollIntoViewIfNeeded(true)\n        }, time)\n      }\n    },\n    onClickErrorIcon () {\n      if (this.shouldToastError && this.firstError) {\n        this.showErrorToast = true\n      }\n      this.$emit('on-click-error-icon', this.firstError)\n    },\n    maskValue (val) {\n      const val1 = this.mask ? mask.toPattern(val, this.mask) : val\n      return val1\n    },\n    reset (value = '') {\n      this.dirty = false\n      this.currentValue = value\n      this.firstError = ''\n      this.valid = true\n    },\n    clear () {\n      this.currentValue = ''\n      this.focus()\n      this.$emit('on-click-clear-icon')\n    },\n    focus () {\n      this.$refs.input.focus()\n    },\n    blur () {\n      this.$refs.input.blur()\n    },\n    focusHandler ($event) {\n      this.$emit('on-focus', this.currentValue, $event)\n      this.isFocus = true\n      // this.scrollIntoView(500)\n      // this.scrollIntoView(5000)\n      setTimeout(() => {\n        // 因为有1秒的延迟，如果切换了页面，input已经不存在，所以加个判断\n        !this.$refs.input || this.$refs.input.scrollIntoViewIfNeeded(false)\n        // this.$refs.input.scrollIntoViewIfNeeded()\n      }, 1000)\n      // $event.target.\n    },\n    onBlur ($event) {\n      this.setTouched()\n      this.validate()\n      this.isFocus = false\n      this.$emit('on-blur', this.currentValue, $event)\n    },\n    onKeyUp (e) {\n      if (e.key === 'Enter') {\n        e.target.blur()\n        this.$emit('on-enter', this.currentValue, e)\n      }\n    },\n    getError () {\n      let key = Object.keys(this.errors)[0]\n      this.firstError = this.errors[key]\n    },\n    validate () {\n      if (typeof this.equalWith !== 'undefined') {\n        this.validateEqual()\n        return\n      }\n      this.errors = {}\n\n      if (!this.currentValue && !this.required) {\n        this.valid = true\n        return\n      }\n\n      if (!this.currentValue && this.required) {\n        this.valid = false\n        this.errors.required = '必填哦'\n        this.getError()\n        return\n      }\n\n      if (typeof this.isType === 'string') {\n        const validator = validators[this.isType]\n        if (validator) {\n          let value = this.currentValue\n\n          if (this.isType === 'china-mobile' && this.mask === '999 9999 9999') {\n            value = this.currentValue.replace(/\\s+/g, '')\n          }\n\n          this.valid = validator[ 'fn' ](value)\n          if (!this.valid) {\n            this.forceShowError = true\n            this.errors.format = validator[ 'msg' ] + '格式不对哦~'\n            this.getError()\n            return\n          } else {\n            delete this.errors.format\n          }\n        }\n      }\n\n      if (typeof this.isType === 'function') {\n        const validStatus = this.isType(this.currentValue)\n        this.valid = validStatus.valid\n        if (!this.valid) {\n          this.errors.format = validStatus.msg\n          this.forceShowError = true\n          this.getError()\n          return\n        } else {\n          delete this.errors.format\n        }\n      }\n\n      if (this.min) {\n        if (this.currentValue.length < this.min) {\n          this.errors.min = `最少应该输入${this.min}个字符哦`\n          this.valid = false\n          this.getError()\n          return\n        } else {\n          delete this.errors.min\n        }\n      }\n\n      if (this.max) {\n        if (this.currentValue.length > this.max) {\n          this.errors.max = `最多可以输入${this.max}个字符哦`\n          this.valid = false\n          this.forceShowError = true\n          return\n        } else {\n          this.forceShowError = false\n          delete this.errors.max\n        }\n      }\n\n      this.valid = true\n    },\n    validateEqual () {\n      if (!this.equalWith && this.currentValue) {\n        this.valid = false\n        this.errors.equal = '输入不一致'\n        return\n      }\n      let willCheck = this.dirty || this.currentValue.length >= this.equalWith.length\n      // 只在长度符合时显示正确与否\n      if (willCheck && this.currentValue !== this.equalWith) {\n        this.valid = false\n        this.errors.equal = '输入不一致'\n        return\n      } else {\n        if (!this.currentValue && this.required) {\n          this.valid = false\n        } else {\n          this.valid = true\n          delete this.errors.equal\n        }\n      }\n    },\n    // #2810\n    _getInputMaskSelection (selection, direction, maskVal, loop) {\n      if (!this.mask || (loop && direction === 0)) {\n        return selection\n      }\n      if (direction === 0) {\n        direction = this.lastDirection\n      }\n      if (direction > 0) {\n        const maskChar = this.mask.substr(selection - direction, 1)\n        if (!maskChar.match(/[9SA]/)) {\n          return this._getInputMaskSelection(selection + 1, direction, maskVal, true)\n        }\n      }\n      return selection\n    }\n  },\n  data () {\n    return {\n      hasRightFullHeightSlot: false,\n      hasRestrictedLabel: false,\n      firstError: '',\n      forceShowError: false,\n      hasLengthEqual: false,\n      valid: true,\n      currentValue: '',\n      showErrorToast: false,\n      isFocus: false\n    }\n  },\n  watch: {\n    mask (val) {\n      if (val && this.currentValue) {\n        this.currentValue = this.maskValue(this.currentValue)\n      }\n    },\n    valid () {\n      this.getError()\n    },\n    value (val) {\n      this.currentValue = val\n    },\n    equalWith (newVal) {\n      if (newVal && this.equalWith) {\n        if (newVal.length === this.equalWith.length) {\n          this.hasLengthEqual = true\n        }\n        this.validateEqual()\n      } else {\n        this.validate()\n      }\n    },\n    currentValue (newVal, oldVal) {\n      let selection = null\n      if (!this.equalWith && newVal) {\n        this.validateEqual()\n      }\n      if (newVal && this.equalWith) {\n        if (newVal.length === this.equalWith.length) {\n          this.hasLengthEqual = true\n        }\n        this.validateEqual()\n      } else {\n        this.validate()\n      }\n      // #2960\n      try {\n        selection = this.$refs.input.selectionStart\n        let direction = newVal.length - oldVal.length\n        selection = this._getInputMaskSelection(selection, direction, this.maskValue(newVal))\n        this.lastDirection = direction\n      } catch (e) {}\n      this.$emit('input', this.maskValue(newVal))\n      // #2810\n      this.$nextTick(() => {\n        if (this.$refs.input.selectionStart !== selection) {\n          this.$refs.input.selectionStart = selection\n          this.$refs.input.selectionEnd = selection\n        }\n        if (this.currentValue !== this.maskValue(newVal)) {\n          this.currentValue = this.maskValue(newVal)\n        }\n      })\n\n      if (this._debounce) {\n        this._debounce()\n      } else {\n        this.$emit('on-change', newVal)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"index.vue","sourceRoot":"node_modules/vux/src/components/x-input","sourcesContent":["<template>\n\t<div class=\"vux-x-input weui-cell\"\n\t\t:class=\"{\n\t\t\t'weui-cell_warn': showWarn,\n\t\t\t'disabled': disabled,\n\t\t\t'vux-x-input-has-right-full': hasRightFullHeightSlot\n\t\t}\">\n    <div class=\"weui-cell__hd\">\n      <div :style=\"labelStyles\" v-if=\"hasRestrictedLabel\">\n        <slot name=\"restricted-label\"></slot>\n      </div>\n      <slot name=\"label\">\n        <label class=\"weui-label\" :class=\"labelClass\" :style=\"{width: labelWidth || $parent.labelWidth || labelWidthComputed, textAlign: $parent.labelAlign, marginRight: $parent.labelMarginRight}\" v-if=\"title\" v-html=\"title\" :for=\"`vux-x-input-${uuid}`\"></label>\n        <inline-desc v-if=\"inlineDesc\">{{ inlineDesc }}</inline-desc>\n      </slot>\n    </div>\n    <div class=\"weui-cell__bd weui-cell__primary\" :class=\"placeholderAlign ? `vux-x-input-placeholder-${placeholderAlign}` : ''\">\n      <input\n      :id=\"`vux-x-input-${uuid}`\"\n      v-if=\"!type || type === 'text'\"\n      class=\"weui-input\"\n      :maxlength=\"max\"\n      :autocomplete=\"autocomplete\"\n      :autocapitalize=\"autocapitalize\"\n      :autocorrect=\"autocorrect\"\n      :spellcheck=\"spellcheck\"\n      :style=\"inputStyle\"\n      type=\"text\"\n      :name=\"name\"\n      :pattern=\"pattern\"\n      :placeholder=\"placeholder\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      v-model=\"currentValue\"\n      @focus=\"focusHandler\"\n      @blur=\"onBlur\"\n      @keyup=\"onKeyUp\"\n      ref=\"input\"/>\n      <input\n      :id=\"`vux-x-input-${uuid}`\"\n      v-if=\"type === 'number'\"\n      class=\"weui-input\"\n      :maxlength=\"max\"\n      :autocomplete=\"autocomplete\"\n      :autocapitalize=\"autocapitalize\"\n      :autocorrect=\"autocorrect\"\n      :spellcheck=\"spellcheck\"\n      :style=\"inputStyle\"\n      type=\"number\"\n      :name=\"name\"\n      :pattern=\"pattern\"\n      :placeholder=\"placeholder\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      v-model=\"currentValue\"\n      @focus=\"focusHandler\"\n      @blur=\"onBlur\"\n      @keyup=\"onKeyUp\"\n      ref=\"input\"/>\n      <input\n      :id=\"`vux-x-input-${uuid}`\"\n      v-if=\"type === 'email'\"\n      class=\"weui-input\"\n      :maxlength=\"max\"\n      :autocomplete=\"autocomplete\"\n      :autocapitalize=\"autocapitalize\"\n      :autocorrect=\"autocorrect\"\n      :spellcheck=\"spellcheck\"\n      :style=\"inputStyle\"\n      type=\"email\"\n      :name=\"name\"\n      :pattern=\"pattern\"\n      :placeholder=\"placeholder\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      v-model=\"currentValue\"\n      @focus=\"focusHandler\"\n      @blur=\"onBlur\"\n      @keyup=\"onKeyUp\"\n      ref=\"input\"/>\n      <input\n      :id=\"`vux-x-input-${uuid}`\"\n      v-if=\"type === 'password'\"\n      class=\"weui-input\"\n      :maxlength=\"max\"\n      :autocomplete=\"autocomplete\"\n      :autocapitalize=\"autocapitalize\"\n      :autocorrect=\"autocorrect\"\n      :spellcheck=\"spellcheck\"\n      :style=\"inputStyle\"\n      type=\"password\"\n      :name=\"name\"\n      :pattern=\"pattern\"\n      :placeholder=\"placeholder\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      v-model=\"currentValue\"\n      @focus=\"focusHandler\"\n      @blur=\"onBlur\"\n      @keyup=\"onKeyUp\"\n      ref=\"input\"/>\n      <input\n      :id=\"`vux-x-input-${uuid}`\"\n      v-if=\"type === 'tel'\"\n      class=\"weui-input\"\n      :maxlength=\"max\"\n      :autocomplete=\"autocomplete\"\n      :autocapitalize=\"autocapitalize\"\n      :autocorrect=\"autocorrect\"\n      :spellcheck=\"spellcheck\"\n      :style=\"inputStyle\"\n      type=\"tel\"\n      :name=\"name\"\n      :pattern=\"pattern\"\n      :placeholder=\"placeholder\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      v-model=\"currentValue\"\n      @focus=\"focusHandler\"\n      @blur=\"onBlur\"\n      @keyup=\"onKeyUp\"\n      ref=\"input\"/>\n    </div>\n    <div class=\"weui-cell__ft\">\n      <icon type=\"clear\" v-show=\"!hasRightFullHeightSlot && !equalWith && showClear && currentValue !== '' && !readonly && !disabled && isFocus\" @click.native=\"clear\"></icon>\n\n      <icon @click.native=\"onClickErrorIcon\" class=\"vux-input-icon\" type=\"warn\" :title=\"!valid ? firstError : ''\" v-show=\"showWarn\"></icon>\n      <icon @click.native=\"onClickErrorIcon\" class=\"vux-input-icon\" type=\"warn\" v-if=\"!novalidate && hasLengthEqual && dirty && equalWith && !valid\"></icon>\n\n      <icon type=\"success\" v-show=\"!novalidate && equalWith && equalWith === currentValue && valid\"></icon>\n\n      <icon type=\"success\" class=\"vux-input-icon\" v-show=\"novalidate && iconType === 'success'\"></icon>\n      <icon type=\"warn\" class=\"vux-input-icon\" v-show=\"novalidate && iconType === 'error'\"></icon>\n\n      <slot name=\"right\"></slot>\n      <div v-if=\"hasRightFullHeightSlot\" class=\"vux-x-input-right-full\">\n        <slot name=\"right-full-height\"></slot>\n      </div>\n    </div>\n\n    <toast\n    v-model=\"showErrorToast\"\n    type=\"text\"\n    width=\"auto\"\n    :time=\"600\">{{ firstError }}</toast>\n  </div>\n</template>\n\n<script>\nimport Base from '../../libs/base'\nimport Icon from '../icon'\nimport Toast from '../toast'\nimport InlineDesc from '../inline-desc'\n\nimport isEmail from 'validator/lib/isEmail'\nimport isMobilePhone from 'validator/lib/isMobilePhone'\n\nimport Debounce from '../../tools/debounce'\n\nimport mask from 'vanilla-masker'\n\nconst validators = {\n  'email': {\n    fn: isEmail,\n    msg: '邮箱格式'\n  },\n  'china-mobile': {\n    fn (str) {\n      return isMobilePhone(str, 'zh-CN')\n    },\n    msg: '手机号码'\n  },\n  'china-name': {\n    fn (str) {\n      return str.length >= 2 && str.length <= 6\n    },\n    msg: '中文姓名'\n  }\n}\nexport default {\n  name: 'x-input',\n  created () {\n    this.currentValue = (this.value === undefined || this.value === null) ? '' : (this.mask ? this.maskValue(this.value) : this.value)\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV === 'development') {\n      if (!this.title && !this.placeholder && !this.currentValue) {\n        console.warn('no title and no placeholder?')\n      }\n    }\n\n    if (this.required && (typeof this.currentValue === 'undefined' || this.currentValue === '')) {\n      this.valid = false\n    }\n    this.handleChangeEvent = true\n    if (this.debounce) {\n      this._debounce = Debounce(() => {\n        this.$emit('on-change', this.currentValue)\n      }, this.debounce)\n    }\n  },\n  beforeMount () {\n    if (this.$slots && this.$slots['restricted-label']) {\n      this.hasRestrictedLabel = true\n    }\n    if (this.$slots && this.$slots['right-full-height']) {\n      this.hasRightFullHeightSlot = true\n    }\n  },\n  beforeDestroy () {\n    if (this._debounce) {\n      this._debounce.cancel()\n    }\n    window.removeEventListener('resize', this.scrollIntoView)\n  },\n  mixins: [Base],\n  components: {\n    Icon,\n    InlineDesc,\n    Toast\n  },\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    placeholder: String,\n    value: [String, Number],\n    name: String,\n    readonly: Boolean,\n    disabled: Boolean,\n    keyboard: String,\n    inlineDesc: String,\n    isType: [String, Function],\n    min: Number,\n    max: Number,\n    showClear: {\n      type: Boolean,\n      default: true\n    },\n    equalWith: String,\n    textAlign: String,\n    // https://github.com/yisibl/blog/issues/3\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    autocapitalize: {\n      type: String,\n      default: 'off'\n    },\n    autocorrect: {\n      type: String,\n      default: 'off'\n    },\n    spellcheck: {\n      type: String,\n      default: 'false'\n    },\n    novalidate: {\n      type: Boolean,\n      default: false\n    },\n    iconType: String,\n    debounce: Number,\n    placeholderAlign: String,\n    labelWidth: String,\n    mask: String,\n    shouldToastError: {\n      type: Boolean,\n      default: true\n    }\n  },\n  computed: {\n    labelStyles () {\n      const {$parent = {}} = this\n      return {\n        width: this.labelWidthComputed || $parent.labelWidth || this.labelWidthComputed,\n        textAlign: $parent.labelAlign,\n        marginRight: $parent.labelMarginRight\n      }\n    },\n    labelClass () {\n      return {\n        'vux-cell-justify': this.$parent && (this.$parent.labelAlign === 'justify' || this.$parent.$parent.labelAlign === 'justify')\n      }\n    },\n    pattern () {\n      if (this.keyboard === 'number' || this.isType === 'china-mobile') {\n        return '[0-9]*'\n      }\n    },\n    labelWidthComputed () {\n      const width = this.title.replace(/[^x00-xff]/g, '00').length / 2 + 1\n      if (width < 10) {\n        return width + 'em'\n      }\n    },\n    hasErrors () {\n      return Object.keys(this.errors).length > 0\n    },\n    inputStyle () {\n      if (this.textAlign) {\n        return {\n          textAlign: this.textAlign\n        }\n      }\n    },\n    showWarn () {\n      return !this.novalidate && !this.equalWith && !this.valid && this.firstError && (this.touched || this.forceShowError)\n    }\n  },\n  mounted () {\n    window.addEventListener('resize', this.scrollIntoView)\n  },\n  methods: {\n    scrollIntoView (time = 0) {\n      // alert('scroll into view')\n      if (/iphone/i.test(navigator.userAgent)) {\n        // return\n      }\n      if (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA') {\n        // alert('will scroll')\n        setTimeout(() => {\n          // alert(this.$refs.input.length)\n          this.$refs.input.scrollIntoViewIfNeeded(true)\n        }, time)\n      }\n    },\n    onClickErrorIcon () {\n      if (this.shouldToastError && this.firstError) {\n        this.showErrorToast = true\n      }\n      this.$emit('on-click-error-icon', this.firstError)\n    },\n    maskValue (val) {\n      const val1 = this.mask ? mask.toPattern(val, this.mask) : val\n      return val1\n    },\n    reset (value = '') {\n      this.dirty = false\n      this.currentValue = value\n      this.firstError = ''\n      this.valid = true\n    },\n    clear () {\n      this.currentValue = ''\n      this.focus()\n      this.$emit('on-click-clear-icon')\n    },\n    focus () {\n      this.$refs.input.focus()\n    },\n    blur () {\n      this.$refs.input.blur()\n    },\n    focusHandler ($event) {\n      this.$emit('on-focus', this.currentValue, $event)\n      this.isFocus = true\n      // this.scrollIntoView(500)\n      // this.scrollIntoView(5000)\n      setTimeout(() => {\n        // 因为有1秒的延迟，如果切换了页面，input已经不存在，所以加个判断\n        !this.$refs.input || this.$refs.input.scrollIntoViewIfNeeded(false)\n        // this.$refs.input.scrollIntoViewIfNeeded()\n      }, 1000)\n      // $event.target.\n    },\n    onBlur ($event) {\n      this.setTouched()\n      this.validate()\n      this.isFocus = false\n      this.$emit('on-blur', this.currentValue, $event)\n    },\n    onKeyUp (e) {\n      if (e.key === 'Enter') {\n        e.target.blur()\n        this.$emit('on-enter', this.currentValue, e)\n      }\n    },\n    getError () {\n      let key = Object.keys(this.errors)[0]\n      this.firstError = this.errors[key]\n    },\n    validate () {\n      if (typeof this.equalWith !== 'undefined') {\n        this.validateEqual()\n        return\n      }\n      this.errors = {}\n\n      if (!this.currentValue && !this.required) {\n        this.valid = true\n        return\n      }\n\n      if (!this.currentValue && this.required) {\n        this.valid = false\n        this.errors.required = '必填哦'\n        this.getError()\n        return\n      }\n\n      if (typeof this.isType === 'string') {\n        const validator = validators[this.isType]\n        if (validator) {\n          let value = this.currentValue\n\n          if (this.isType === 'china-mobile' && this.mask === '999 9999 9999') {\n            value = this.currentValue.replace(/\\s+/g, '')\n          }\n\n          this.valid = validator[ 'fn' ](value)\n          if (!this.valid) {\n            this.forceShowError = true\n            this.errors.format = validator[ 'msg' ] + '格式不对哦~'\n            this.getError()\n            return\n          } else {\n            delete this.errors.format\n          }\n        }\n      }\n\n      if (typeof this.isType === 'function') {\n        const validStatus = this.isType(this.currentValue)\n        this.valid = validStatus.valid\n        if (!this.valid) {\n          this.errors.format = validStatus.msg\n          this.forceShowError = true\n          this.getError()\n          return\n        } else {\n          delete this.errors.format\n        }\n      }\n\n      if (this.min) {\n        if (this.currentValue.length < this.min) {\n          this.errors.min = `最少应该输入${this.min}个字符哦`\n          this.valid = false\n          this.getError()\n          return\n        } else {\n          delete this.errors.min\n        }\n      }\n\n      if (this.max) {\n        if (this.currentValue.length > this.max) {\n          this.errors.max = `最多可以输入${this.max}个字符哦`\n          this.valid = false\n          this.forceShowError = true\n          return\n        } else {\n          this.forceShowError = false\n          delete this.errors.max\n        }\n      }\n\n      this.valid = true\n    },\n    validateEqual () {\n      if (!this.equalWith && this.currentValue) {\n        this.valid = false\n        this.errors.equal = '输入不一致'\n        return\n      }\n      let willCheck = this.dirty || this.currentValue.length >= this.equalWith.length\n      // 只在长度符合时显示正确与否\n      if (willCheck && this.currentValue !== this.equalWith) {\n        this.valid = false\n        this.errors.equal = '输入不一致'\n        return\n      } else {\n        if (!this.currentValue && this.required) {\n          this.valid = false\n        } else {\n          this.valid = true\n          delete this.errors.equal\n        }\n      }\n    },\n    // #2810\n    _getInputMaskSelection (selection, direction, maskVal, loop) {\n      if (!this.mask || (loop && direction === 0)) {\n        return selection\n      }\n      if (direction === 0) {\n        direction = this.lastDirection\n      }\n      if (direction > 0) {\n        const maskChar = this.mask.substr(selection - direction, 1)\n        if (!maskChar.match(/[9SA]/)) {\n          return this._getInputMaskSelection(selection + 1, direction, maskVal, true)\n        }\n      }\n      return selection\n    }\n  },\n  data () {\n    return {\n      hasRightFullHeightSlot: false,\n      hasRestrictedLabel: false,\n      firstError: '',\n      forceShowError: false,\n      hasLengthEqual: false,\n      valid: true,\n      currentValue: '',\n      showErrorToast: false,\n      isFocus: false\n    }\n  },\n  watch: {\n    mask (val) {\n      if (val && this.currentValue) {\n        this.currentValue = this.maskValue(this.currentValue)\n      }\n    },\n    valid () {\n      this.getError()\n    },\n    value (val) {\n      this.currentValue = val\n    },\n    equalWith (newVal) {\n      if (newVal && this.equalWith) {\n        if (newVal.length === this.equalWith.length) {\n          this.hasLengthEqual = true\n        }\n        this.validateEqual()\n      } else {\n        this.validate()\n      }\n    },\n    currentValue (newVal, oldVal) {\n      let selection = null\n      if (!this.equalWith && newVal) {\n        this.validateEqual()\n      }\n      if (newVal && this.equalWith) {\n        if (newVal.length === this.equalWith.length) {\n          this.hasLengthEqual = true\n        }\n        this.validateEqual()\n      } else {\n        this.validate()\n      }\n      // #2960\n      try {\n        selection = this.$refs.input.selectionStart\n        let direction = newVal.length - oldVal.length\n        selection = this._getInputMaskSelection(selection, direction, this.maskValue(newVal))\n        this.lastDirection = direction\n      } catch (e) {}\n      this.$emit('input', this.maskValue(newVal))\n      // #2810\n      this.$nextTick(() => {\n        if (this.$refs.input.selectionStart !== selection) {\n          this.$refs.input.selectionStart = selection\n          this.$refs.input.selectionEnd = selection\n        }\n        if (this.currentValue !== this.maskValue(newVal)) {\n          this.currentValue = this.maskValue(newVal)\n        }\n      })\n\n      if (this._debounce) {\n        this._debounce()\n      } else {\n        this.$emit('on-change', newVal)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\">\n@import '../../styles/weui/widget/weui_cell/weui_access';\n@import '../../styles/weui/widget/weui_cell/weui_cell_global';\n@import '../../styles/weui/widget/weui_cell/weui_form/weui_form_common';\n@import '../../styles/weui/widget/weui_cell/weui_form/weui_vcode';\n\n.vux-x-input .vux-x-input-placeholder-right input::-webkit-input-placeholder {\n  text-align: right;\n}\n.vux-x-input .vux-x-input-placeholder-center input::-webkit-input-placeholder {\n  text-align: center;\n}\n.vux-x-input .vux-input-icon {\n  font-size: 21px;\n}\n.vux-input-icon.weui-icon-warn:before, .vux-input-icon.weui-icon-success:before {\n  font-size: 21px;\n}\n.vux-x-input .weui-icon {\n  padding-left: 5px;\n}\n.vux-x-input.weui-cell_vcode {\n  padding-top: 0;\n  padding-right: 0;\n  padding-bottom: 0;\n}\n.vux-x-input.disabled {\n  .weui-input {\n    text-fill-color: #888;\n    -webkit-text-fill-color: #888; /* Override iOS / Android font color change */\n    opacity: 1; /* Override iOS opacity change affecting text & background color */\n  }\n}\n.vux-x-input-right-full {\n  margin-left: 5px;\n  height: @weuiCellHeight;\n  vertical-align: middle;\n\t& img {\n\t\theight: @weuiCellHeight;\n\t}\n}\n.vux-x-input-has-right-full {\n  padding-top: 0;\n  padding-right: 0;\n  padding-bottom: 0;\n}\n</style>\n"]}]}