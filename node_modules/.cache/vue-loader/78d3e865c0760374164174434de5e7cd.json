{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/x-textarea/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/x-textarea/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Base from '../../libs/base'\nimport InlineDesc from '../inline-desc'\nimport Autosize from 'autosize' // prop.autosize\n\nexport default {\n  name: 'x-textarea',\n  minxins: [Base],\n  mounted () {\n    if (this.$slots && this.$slots['restricted-label']) {\n      this.hasRestrictedLabel = true\n    }\n    // prop.autosize\n    this.$nextTick(() => {\n      if (this.autosize) {\n        this.bindAutosize()\n      }\n    })\n    // prop.autosize\n  },\n  components: {\n    InlineDesc\n  },\n  props: {\n    title: String,\n    inlineDesc: String,\n    showCounter: {\n      type: Boolean,\n      default: true\n    },\n    max: Number,\n    value: String,\n    name: String,\n    placeholder: String,\n    readonly: Boolean,\n    disabled: Boolean,\n    rows: {\n      type: Number,\n      default: 3\n    },\n    cols: {\n      type: Number,\n      default: 30\n    },\n    height: Number,\n    // https://github.com/yisibl/blog/issues/3\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    autocapitalize: {\n      type: String,\n      default: 'off'\n    },\n    autocorrect: {\n      type: String,\n      default: 'off'\n    },\n    spellcheck: {\n      type: String,\n      default: 'false'\n    },\n    autosize: Boolean // prop.autosize\n  },\n  created () {\n    this.currentValue = this.value\n  },\n  watch: {\n    // prop.autosize\n    autosize (val) {\n      this.unbindAutosize()\n      if (val) {\n        this.bindAutosize()\n      }\n    },\n    // prop.autosize\n    value (val) {\n      this.currentValue = val\n    },\n    currentValue (newVal) {\n      if (this.max && newVal) {\n        let len = newVal.replace(/\\n/g, 'aa').length\n        if (len > this.max) {\n          let newLines = newVal.match(/\\n/g).length\n          this.currentValue = newVal.slice(0, this.max - newLines)\n          this.$nextTick(() => {\n            if (this.autosize) {\n              this.updateAutosize()\n            }\n          })\n        }\n      }\n      this.$emit('input', this.currentValue)\n      this.$emit('on-change', this.currentValue)\n    }\n  },\n  data () {\n    return {\n      hasRestrictedLabel: false,\n      currentValue: ''\n    }\n  },\n  computed: {\n    count () {\n      let len = 0\n      if (this.currentValue) {\n        len = this.currentValue.replace(/\\n/g, 'aa').length\n      }\n      return len > this.max ? this.max : len\n    },\n    textareaStyle () {\n      if (this.height) {\n        return {\n          height: `${this.height}px`\n        }\n      }\n    },\n    labelStyles () {\n      const {$parent = {}} = this\n      return {\n        width: $parent.labelWidth || (this.labelWidth + 'em'),\n        textAlign: $parent.labelAlign,\n        marginRight: $parent.labelMarginRight\n      }\n    },\n    labelWidth () {\n      return this.title.replace(/[^x00-xff]/g, '00').length / 2 + 1\n    },\n    labelClass () {\n      if (!this.$parent) return {}\n      return {\n        'vux-cell-justify': this.$parent.labelAlign === 'justify' || this.$parent.$parent.labelAlign === 'justify'\n      }\n    }\n  },\n  methods: {\n    updateAutosize () {\n      Autosize.update(this.$refs.textarea)\n    },\n    // prop.autosize\n    bindAutosize () {\n      Autosize(this.$refs.textarea)\n    },\n    unbindAutosize () {\n      Autosize.destroy(this.$refs.textarea)\n    },\n    // prop.autosize\n    focus () {\n      this.$refs.textarea.focus()\n    }\n  },\n  // prop.autosize\n  beforeDestroy () {\n    this.unbindAutosize()\n  }\n  // prop.autosize\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"index.vue","sourceRoot":"node_modules/vux/src/components/x-textarea","sourcesContent":["<template>\n  <div class=\"weui-cell vux-x-textarea\">\n    <div class=\"weui-cell__hd\">\n      <div :style=\"labelStyles\" v-if=\"hasRestrictedLabel\">\n        <slot name=\"restricted-label\"></slot>\n      </div>\n      <slot name=\"label\">\n        <label class=\"weui-label\" :class=\"labelClass\" :style=\"{width: $parent.labelWidth || (labelWidth + 'em'), textAlign: $parent.labelAlign, marginRight: $parent.labelMarginRight}\" v-if=\"title\" v-html=\"title\"></label>\n        <inline-desc v-if=\"inlineDesc\">{{inlineDesc}}</inline-desc>\n      </slot>\n    </div>\n    <div class=\"weui-cell__bd\">\n      <textarea\n        class=\"weui-textarea\"\n        :autocomplete=\"autocomplete\"\n        :autocapitalize=\"autocapitalize\"\n        :autocorrect=\"autocorrect\"\n        :spellcheck=\"spellcheck\"\n        :placeholder=\"placeholder\"\n        :readonly=\"readonly\"\n        :disabled=\"disabled\"\n        :name=\"name\"\n        :rows=\"rows\"\n        :cols=\"cols\"\n        v-model=\"currentValue\"\n        @focus=\"$emit('on-focus')\"\n        @blur=\"$emit('on-blur')\"\n        :style=\"textareaStyle\"\n        :maxlength=\"max\"\n        ref=\"textarea\"></textarea>\n      <div class=\"weui-textarea-counter\" v-show=\"showCounter && max\" @click=\"focus\">\n        <span>{{count}}</span>/{{max}}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Base from '../../libs/base'\nimport InlineDesc from '../inline-desc'\nimport Autosize from 'autosize' // prop.autosize\n\nexport default {\n  name: 'x-textarea',\n  minxins: [Base],\n  mounted () {\n    if (this.$slots && this.$slots['restricted-label']) {\n      this.hasRestrictedLabel = true\n    }\n    // prop.autosize\n    this.$nextTick(() => {\n      if (this.autosize) {\n        this.bindAutosize()\n      }\n    })\n    // prop.autosize\n  },\n  components: {\n    InlineDesc\n  },\n  props: {\n    title: String,\n    inlineDesc: String,\n    showCounter: {\n      type: Boolean,\n      default: true\n    },\n    max: Number,\n    value: String,\n    name: String,\n    placeholder: String,\n    readonly: Boolean,\n    disabled: Boolean,\n    rows: {\n      type: Number,\n      default: 3\n    },\n    cols: {\n      type: Number,\n      default: 30\n    },\n    height: Number,\n    // https://github.com/yisibl/blog/issues/3\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    autocapitalize: {\n      type: String,\n      default: 'off'\n    },\n    autocorrect: {\n      type: String,\n      default: 'off'\n    },\n    spellcheck: {\n      type: String,\n      default: 'false'\n    },\n    autosize: Boolean // prop.autosize\n  },\n  created () {\n    this.currentValue = this.value\n  },\n  watch: {\n    // prop.autosize\n    autosize (val) {\n      this.unbindAutosize()\n      if (val) {\n        this.bindAutosize()\n      }\n    },\n    // prop.autosize\n    value (val) {\n      this.currentValue = val\n    },\n    currentValue (newVal) {\n      if (this.max && newVal) {\n        let len = newVal.replace(/\\n/g, 'aa').length\n        if (len > this.max) {\n          let newLines = newVal.match(/\\n/g).length\n          this.currentValue = newVal.slice(0, this.max - newLines)\n          this.$nextTick(() => {\n            if (this.autosize) {\n              this.updateAutosize()\n            }\n          })\n        }\n      }\n      this.$emit('input', this.currentValue)\n      this.$emit('on-change', this.currentValue)\n    }\n  },\n  data () {\n    return {\n      hasRestrictedLabel: false,\n      currentValue: ''\n    }\n  },\n  computed: {\n    count () {\n      let len = 0\n      if (this.currentValue) {\n        len = this.currentValue.replace(/\\n/g, 'aa').length\n      }\n      return len > this.max ? this.max : len\n    },\n    textareaStyle () {\n      if (this.height) {\n        return {\n          height: `${this.height}px`\n        }\n      }\n    },\n    labelStyles () {\n      const {$parent = {}} = this\n      return {\n        width: $parent.labelWidth || (this.labelWidth + 'em'),\n        textAlign: $parent.labelAlign,\n        marginRight: $parent.labelMarginRight\n      }\n    },\n    labelWidth () {\n      return this.title.replace(/[^x00-xff]/g, '00').length / 2 + 1\n    },\n    labelClass () {\n      if (!this.$parent) return {}\n      return {\n        'vux-cell-justify': this.$parent.labelAlign === 'justify' || this.$parent.$parent.labelAlign === 'justify'\n      }\n    }\n  },\n  methods: {\n    updateAutosize () {\n      Autosize.update(this.$refs.textarea)\n    },\n    // prop.autosize\n    bindAutosize () {\n      Autosize(this.$refs.textarea)\n    },\n    unbindAutosize () {\n      Autosize.destroy(this.$refs.textarea)\n    },\n    // prop.autosize\n    focus () {\n      this.$refs.textarea.focus()\n    }\n  },\n  // prop.autosize\n  beforeDestroy () {\n    this.unbindAutosize()\n  }\n  // prop.autosize\n}\n</script>\n\n<style lang=\"less\">\n@import '../../styles/weui/widget/weui_cell/weui_cell_global';\n@import '../../styles/weui/widget/weui_cell/weui_form/weui_form_common';\n\n.vux-x-textarea.weui-cell  {\n  align-items: flex-start;\n}\n</style>\n"]}]}