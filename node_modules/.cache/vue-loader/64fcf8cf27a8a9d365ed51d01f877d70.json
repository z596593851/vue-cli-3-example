{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/datetime/index.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/datetime/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/less-loader/dist/cjs.js","mtime":1592111419098},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import './style.less';\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8VA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/datetime","sourcesContent":["<template>\n  <a\n    class=\"vux-datetime weui-cell\"\n    :class=\"{'weui-cell_access': !readonly}\"\n    :data-cancel-text=\"$t('cancel_text')\"\n    :data-confirm-text=\"$t('confirm_text')\"\n    href=\"javascript:\">\n    <slot>\n      <div>\n        <slot name=\"title\">\n          <p\n            :style=\"styles\"\n            :class=\"labelClass\"\n            v-html=\"title\"></p>\n        </slot>\n        <inline-desc v-if=\"inlineDesc\">{{ inlineDesc }}</inline-desc>\n      </div>\n      <div\n        class=\"weui-cell__ft vux-cell-primary vux-datetime-value\"\n        :style=\"{\n          textAlign: valueTextAlign\n        }\">\n        <span\n          class=\"vux-cell-placeholder\"\n          v-if=\"!currentValue && placeholder\">{{ placeholder }}</span>\n        <span\n          class=\"vux-cell-value\"\n          v-if=\"currentValue\">{{ displayFormat ? displayFormat(currentValue) : currentValue }}</span>\n        <icon\n          class=\"vux-input-icon\"\n          type=\"warn\"\n          v-show=\"!valid\"\n          :title=\"firstError\"></icon>\n      </div>\n    </slot>\n  </a>\n</template>\n\n<i18n>\ncancel_text:\n  en: cancel\n  zh-CN: 取消\nconfirm_text:\n  en: done\n  zh-CN: 确定\n</i18n>\n\n<script>\nimport Icon from '../icon'\nimport Picker from './datetimepicker'\nimport Group from '../group'\nimport InlineDesc from '../inline-desc'\nimport Uuid from '../../mixins/uuid'\nimport format from '../../tools/date/format'\n\nexport default {\n  name: 'datetime',\n  mixins: [Uuid],\n  components: {\n    Group,\n    InlineDesc,\n    Icon\n  },\n  props: {\n    format: {\n      type: String,\n      default: 'YYYY-MM-DD',\n      validator (val) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV === 'development' && val && /A/.test(val) && val !== 'YYYY-MM-DD A') {\n          return console.error('[VUX] Datetime prop:format 使用 A 时只允许的值为： YYYY-MM-DD A')\n        }\n        return true\n      }\n    },\n    title: String,\n    value: {\n      type: String,\n      default: ''\n    },\n    inlineDesc: String,\n    placeholder: String,\n    minYear: Number,\n    maxYear: Number,\n    confirmText: String,\n    cancelText: String,\n    clearText: String,\n    yearRow: {\n      type: String,\n      default: '{value}'\n    },\n    monthRow: {\n      type: String,\n      default: '{value}'\n    },\n    dayRow: {\n      type: String,\n      default: '{value}'\n    },\n    hourRow: {\n      type: String,\n      default: '{value}'\n    },\n    minuteRow: {\n      type: String,\n      default: '{value}'\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    minHour: {\n      type: Number,\n      default: 0\n    },\n    maxHour: {\n      type: Number,\n      default: 23\n    },\n    startDate: {\n      type: String,\n      validator (val) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV === 'development' && val && val.length !== 10) {\n          console.error('[VUX] Datetime prop:start-date 必须为 YYYY-MM-DD 格式')\n        }\n        return val ? val.length === 10 : true\n      }\n    },\n    endDate: {\n      type: String,\n      validator (val) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV === 'development' && val && val.length !== 10) {\n          console.error('[VUX] Datetime prop:end-date 必须为 YYYY-MM-DD 格式')\n        }\n        return val ? val.length === 10 : true\n      }\n    },\n    valueTextAlign: String,\n    displayFormat: Function,\n    readonly: Boolean,\n    hourList: Array,\n    minuteList: Array,\n    show: Boolean,\n    defaultSelectedValue: String,\n    computeHoursFunction: Function,\n    computeDaysFunction: Function,\n    orderMap: Object\n  },\n  created () {\n    this.isFirstSetValue = false\n    this.currentValue = this.value\n  },\n  data () {\n    return {\n      currentShow: false,\n      currentValue: null,\n      valid: true,\n      errors: {}\n    }\n  },\n  mounted () {\n    const uuid = this.uuid\n    this.$el.setAttribute('id', `vux-datetime-${uuid}`)\n    if (!this.readonly) {\n      this.$nextTick(() => {\n        this.render()\n\n        if (this.show) {\n          this.$nextTick(() => {\n            this.picker && this.picker.show(this.currentValue)\n          })\n        }\n      })\n    }\n  },\n  computed: {\n    styles () {\n      if (!this.$parent) {\n        return {}\n      }\n      return {\n        width: this.$parent.labelWidth,\n        textAlign: this.$parent.labelAlign,\n        marginRight: this.$parent.labelMarginRight\n      }\n    },\n    pickerOptions () {\n      const _this = this\n      const options = {\n        trigger: '#vux-datetime-' + this.uuid,\n        format: this.format,\n        value: this.currentValue,\n        output: '.vux-datetime-value',\n        confirmText: _this.getButtonText('confirm'),\n        cancelText: _this.getButtonText('cancel'),\n        clearText: _this.clearText,\n        yearRow: this.yearRow,\n        monthRow: this.monthRow,\n        dayRow: this.dayRow,\n        hourRow: this.hourRow,\n        minuteRow: this.minuteRow,\n        minHour: this.minHour,\n        maxHour: this.maxHour,\n        startDate: this.startDate,\n        endDate: this.endDate,\n        hourList: this.hourList,\n        minuteList: this.minuteList,\n        defaultSelectedValue: this.defaultSelectedValue,\n        computeHoursFunction: this.computeHoursFunction,\n        computeDaysFunction: this.computeDaysFunction,\n        orderMap: this.orderMap || {},\n        onSelect (type, val, wholeValue) {\n          if (_this.picker && _this.picker.config.renderInline) {\n            _this.$emit('input', wholeValue)\n            _this.$emit('on-change', wholeValue)\n          }\n        },\n        onConfirm (value) {\n          _this.currentValue = value\n        },\n        onClear (value) {\n          _this.$emit('on-clear', value)\n        },\n        onHide (type) {\n          _this.currentShow = false\n          _this.$emit('update:show', false)\n          _this.validate()\n          _this.$emit('on-hide', type)\n          if (type === 'cancel') {\n            _this.$emit('on-cancel')\n          }\n          if (type === 'confirm') {\n            setTimeout(() => {\n              _this.$nextTick(() => {\n                _this.$emit('on-confirm', _this.value)\n              })\n            })\n          }\n        },\n        onShow () {\n          _this.currentShow = true\n          _this.$emit('update:show', true)\n          _this.$emit('on-show')\n        }\n      }\n      if (this.minYear) {\n        options.minYear = this.minYear\n      }\n      if (this.maxYear) {\n        options.maxYear = this.maxYear\n      }\n      return options\n    },\n    firstError () {\n      let key = Object.keys(this.errors)[0]\n      return this.errors[key]\n    },\n    labelClass () {\n      if (!this.$parent) {\n        return {}\n      }\n      return {\n        'vux-cell-justify': this.$parent.labelAlign === 'justify' || this.$parent.$parent.labelAlign === 'justify'\n      }\n    }\n  },\n  methods: {\n    getButtonText (type) {\n      if (type === 'cancel' && this.cancelText) {\n        return this.cancelText\n      } else if (type === 'confirm' && this.confirmText) {\n        return this.confirmText\n      }\n      return this.$el.getAttribute(`data-${type}-text`)\n    },\n    render () {\n      this.$nextTick(() => {\n        this.picker && this.picker.destroy()\n        this.picker = new Picker(this.pickerOptions)\n      })\n    },\n    validate () {\n      if (!this.currentValue && this.required) {\n        this.valid = false\n        this.errors.required = '必填'\n        return\n      }\n      this.valid = true\n      this.errors = {}\n    }\n  },\n  watch: {\n    readonly (val) {\n      if (val) {\n        this.picker && this.picker.destroy()\n      } else {\n        this.render()\n      }\n    },\n    show (val) {\n      if (val === this.currentShow) return\n      if (val) {\n        this.picker && this.picker.show(this.currentValue)\n      } else {\n        this.picker && this.picker.hide(this.currentValue)\n      }\n    },\n    currentValue (val, oldVal) {\n      this.$emit('input', val)\n      if (!this.isFirstSetValue) {\n        this.isFirstSetValue = true\n        oldVal && this.$emit('on-change', val)\n      } else {\n        this.$emit('on-change', val)\n      }\n      this.validate()\n    },\n    startDate () {\n      this.render()\n    },\n    endDate () {\n      this.render()\n    },\n    format (val) {\n      if (this.currentValue) {\n        this.currentValue = format(this.currentValue, val)\n      }\n      this.render()\n    },\n    value (val) {\n      // do not force render when renderInline is true\n      if (this.readonly || (this.picker && this.picker.config.renderInline)) {\n        this.currentValue = val\n        return\n      }\n      if (this.currentValue !== val) {\n        this.currentValue = val\n        this.render()\n      }\n    }\n  },\n  beforeDestroy () {\n    this.picker && this.picker.destroy()\n  }\n}\n</script>\n\n<style lang=\"less\">\n@import './style.less';\n</style>\n"]}]}