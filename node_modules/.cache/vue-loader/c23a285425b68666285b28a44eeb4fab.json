{"remainingRequest":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js!/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/datetime-range/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vux/src/components/datetime-range/index.vue","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/js-loader.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/code/js/vue-cli-3-example/node_modules/@vux/loader/src/script-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport value2name from '../../filters/value2name'\nimport PopupPicker from '../popup-picker'\nimport getDateRange from '../../tools/date/range'\nimport getNumberRange from '../../tools/number/range'\n\nexport default {\n  name: 'datetime-range',\n  components: {\n    PopupPicker\n  },\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    startDate: String,\n    endDate: String,\n    format: {\n      type: String,\n      default: 'YYYY-MM-DD'\n    },\n    rawValue: Boolean,\n    inlineDesc: String,\n    placeholder: String,\n    hideDistrict: Boolean,\n    valueTextAlign: String\n  },\n  methods: {\n    emitHide (val) {\n      this.$emit('on-hide', val)\n    },\n    getAddressName () {\n      return value2name(this.value, this.list)\n    }\n  },\n  data () {\n    return {\n      currentValue: this.value,\n      cellFormat (val) {\n        return val[0] + ' ' + val[1] + ':' + val[2]\n      }\n    }\n  },\n  computed: {\n    list () {\n      if (!this.startDate || !this.endDate) {\n        return []\n      }\n      const datesNames = getDateRange(this.startDate, this.endDate, this.format)\n      const datesValues = getDateRange(this.startDate, this.endDate, 'YYYY-MM-DD')\n      const hours = getNumberRange(0, 23)\n      const minutes = getNumberRange(0, 59)\n      return [datesNames.map((one, index) => {\n        return {\n          name: one,\n          value: datesValues[index]\n        }\n      }), hours, minutes]\n    },\n    nameValue () {\n      return value2name(this.currentValue, this.list)\n    }\n  },\n  watch: {\n    currentValue (val) {\n      this.$emit('on-change', val)\n      this.$emit('input', val)\n    },\n    value (val) {\n      this.currentValue = val\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/datetime-range","sourcesContent":["<template>\n  <div>\n    <popup-picker :data=\"list\" :title=\"title\" :display-format=\"cellFormat\" v-model=\"currentValue\" :inline-desc=\"inlineDesc\" :placeholder=\"placeholder\" @on-hide=\"emitHide\" @on-show=\"$emit('on-show')\" :value-text-align=\"valueTextAlign\" :column-width=\"[1/2, 1/6]\"></popup-picker>\n  </div>\n</template>\n\n<script>\nimport value2name from '../../filters/value2name'\nimport PopupPicker from '../popup-picker'\nimport getDateRange from '../../tools/date/range'\nimport getNumberRange from '../../tools/number/range'\n\nexport default {\n  name: 'datetime-range',\n  components: {\n    PopupPicker\n  },\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    startDate: String,\n    endDate: String,\n    format: {\n      type: String,\n      default: 'YYYY-MM-DD'\n    },\n    rawValue: Boolean,\n    inlineDesc: String,\n    placeholder: String,\n    hideDistrict: Boolean,\n    valueTextAlign: String\n  },\n  methods: {\n    emitHide (val) {\n      this.$emit('on-hide', val)\n    },\n    getAddressName () {\n      return value2name(this.value, this.list)\n    }\n  },\n  data () {\n    return {\n      currentValue: this.value,\n      cellFormat (val) {\n        return val[0] + ' ' + val[1] + ':' + val[2]\n      }\n    }\n  },\n  computed: {\n    list () {\n      if (!this.startDate || !this.endDate) {\n        return []\n      }\n      const datesNames = getDateRange(this.startDate, this.endDate, this.format)\n      const datesValues = getDateRange(this.startDate, this.endDate, 'YYYY-MM-DD')\n      const hours = getNumberRange(0, 23)\n      const minutes = getNumberRange(0, 59)\n      return [datesNames.map((one, index) => {\n        return {\n          name: one,\n          value: datesValues[index]\n        }\n      }), hours, minutes]\n    },\n    nameValue () {\n      return value2name(this.currentValue, this.list)\n    }\n  },\n  watch: {\n    currentValue (val) {\n      this.$emit('on-change', val)\n      this.$emit('input', val)\n    },\n    value (val) {\n      this.currentValue = val\n    }\n  }\n}\n</script>\n"]}]}